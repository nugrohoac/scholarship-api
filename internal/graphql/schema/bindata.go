// Code generated by go-bindata.
// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/bank.graphql
// type/bank_transfer.graphql
// type/card_identity.graphql
// type/country.graphql
// type/degree.graphql
// type/image.graphql
// type/major.graphql
// type/payment.graphql
// type/requirement.graphql
// type/scholarship.graphql
// type/school.graphql
// type/sponsor.graphql
// type/user.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xf7\x2b\xd4\x5b\xf3\x0b\xbe\x05\x49\x31\x04\xd8\x8a\x22\x69\x0e\xc3\xd0\x03\x63\xb1\x8e\x50\x9b\xd2\x44\x6a\x85\x31\xec\xdf\x07\xd9\xae\xe5\xd8\x5a\x82\xe5\x16\xf2\xc9\x4f\x7c\xef\x89\xd2\x3a\x54\xdf\x82\x80\x18\x4b\xea\xf7\x9d\x52\x4a\xed\xb1\x32\x2c\xe8\x8f\x8c\xfe\xa1\xab\xc4\x5f\x44\x16\x2a\x30\xfa\x97\xd6\xe1\xfd\x58\xc7\x06\x4c\x5d\xa8\x83\x78\x43\x55\x2a\xbb\xb3\x25\x7c\xb2\x99\x06\x30\x7f\x58\xaf\x2f\x3b\xab\xfe\xd3\x77\xdd\x9f\xa3\xd3\x20\x78\x49\x6f\x74\xa1\x76\x24\xe9\x3b\x04\x0d\x66\x69\xc5\x16\xca\x90\x0b\xb2\x6b\xa0\xc2\xb1\x53\xda\xc6\x01\xb5\x4f\x93\x63\x93\x5e\x20\xf1\xed\x6e\xce\x01\x5a\x7b\x64\xce\xd0\x58\x16\xa8\x37\x56\x67\xae\x50\x82\xd7\x3b\x8d\x24\x46\x0c\x72\xa1\x7e\x74\x97\xd9\xa4\x6a\x7b\xff\x9a\xd0\x27\xa0\xf7\x05\x6f\x2c\xae\xcb\xee\x56\x39\x09\xa7\xed\xac\x0a\x28\x67\x32\xe5\x62\xcc\x0a\x49\xa3\xbf\x28\x5f\xe8\xbe\x2e\xc5\xfc\x5a\x28\x2f\xf6\x1d\xe9\x8a\x5b\x7b\x64\x94\xe7\xc1\xd5\x87\xff\xf1\x79\xe3\x11\x04\x0f\xe5\xd9\xd6\xe0\xf9\x6c\x5c\x3a\xcd\xce\x12\x5b\xbf\x50\x26\xef\x3a\x34\x51\x8b\x19\xd4\x44\xfb\xb3\x51\x80\x0f\xf0\x1a\x71\x6e\xb6\x73\xb5\x29\xbb\x87\x70\x10\xf0\x92\xa1\x49\x88\x47\xd2\x99\x3e\x91\x0d\x54\x62\x83\x24\x5b\x90\x9c\x31\xb5\xa9\xcc\xc9\xd4\x46\xda\x2d\x72\xe9\x8d\x8b\x1f\x5b\xe2\x38\x9c\xd8\xe8\xeb\x18\x8f\x3f\x83\xf1\x3d\x59\xc2\xc5\xc0\x0d\xc8\x49\xca\xde\x02\x69\x43\xd5\x3f\xe6\x1a\xba\xd9\x99\x26\x2c\x63\x96\xf7\xa9\xf6\x49\xb2\x2a\x14\x27\x1f\x7b\x7b\x0f\xe1\xd4\x18\x79\xf1\x40\xfc\x86\xfe\x19\xda\x78\x60\x62\x71\xc2\x2f\x6c\x96\xe1\x50\x5e\xc5\x9b\xf9\xbf\xf1\x7e\x16\xc9\xf8\x9c\xc1\xf5\x77\x9c\xa7\xd3\xd6\x0f\x37\x02\xd8\x2f\xc7\x45\x1e\x72\xeb\x63\x50\xca\xd6\x83\x48\x28\xc1\x3d\xea\xd0\xc7\x2a\xf1\xc4\x57\xb2\x90\xa5\x02\xf7\x1d\xc1\xef\x11\x38\x25\x62\xba\x78\x10\xfd\x17\x0b\x99\x75\xcc\x12\x74\xbb\xe9\xd7\x5c\x8f\xe8\xa6\x8f\x2f\x7d\x52\x9d\xe1\xb7\xc8\x62\x08\xf2\xf1\x8b\x17\xec\xc5\x19\x73\x71\x1c\x4b\xd3\xec\x45\xe0\xd6\x96\xe1\x22\x42\xbd\xec\xaf\x99\xa5\xb0\x76\xae\x6e\xb3\x3b\x21\x2b\xc9\xb5\x14\x21\x33\xb4\x0b\x99\x3c\x96\xb6\x69\x90\x74\x37\xd8\x57\x14\x89\x3b\x71\xb6\x26\x56\xe3\xb1\x3f\x7f\x03\x00\x00\xff\xff\x1c\x43\x1d\x9d\x23\x07\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 1827, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x4e\xfb\x30\x0c\xc6\xef\x7b\x0a\xef\xf6\xdf\x2b\xe4\xb8\xff\x18\xaa\x04\x12\x6c\x12\x97\x69\x87\xd0\x9a\x2e\x2c\x8d\x2b\xc7\x15\xaa\x10\xef\x8e\xd2\x40\xd3\x4e\xd5\x04\xa8\x39\xb5\x8e\xfc\xfd\x3e\x7f\x75\xa5\xad\x11\x1e\x1b\xe4\x16\xde\x17\x00\x00\x5b\x94\xfc\xb4\xd6\xee\xfc\xaf\x7b\x0d\xc7\x9a\xca\x88\x82\xcc\x49\x5f\xca\x1b\xf6\xc4\x0a\xf6\xc2\xc6\x95\x7d\xd9\xe9\x0a\x47\xc5\x95\x82\x67\xed\xce\x5b\xc4\x62\x91\xe4\xff\x53\xe3\x84\xdb\xb9\x08\x79\x94\x4b\x90\x3b\x2a\x8d\x4b\xea\x58\x69\x63\xbf\x9b\x96\x7d\xb9\xd6\xde\xbf\x11\x17\xe3\x9b\x95\x02\x1b\xda\x77\xe8\x6b\x72\x1e\xa3\xe2\x0e\x3d\xba\xe2\x26\x08\x3d\x21\x9b\x17\x93\x6b\x31\x74\x9d\xb1\xea\x7d\xc6\xc9\x89\x4b\x92\x87\x2f\xe8\xaf\x3a\x43\x66\xfb\xfc\x44\x56\xb3\x3f\x99\x3a\xf5\x76\x16\x89\xb3\xe2\x47\xd9\x4d\xa4\xec\x45\x4b\xe3\x15\x1c\x32\x27\xc7\xab\x21\xfb\xc4\x4f\x41\xdf\xa2\x0c\x7c\xad\xdb\x6c\x93\xbc\x99\x68\x6a\x39\x21\x30\x18\x6b\x83\x25\x23\x2a\x38\x14\xdd\xc3\x71\x70\x75\xaf\x5f\x89\xe7\xda\x91\x2a\x88\x5d\xac\x61\xb0\x4e\x76\x16\x42\x38\xe1\x57\x9a\x4a\x8d\xec\x25\x37\x7e\xb5\xbf\x80\x47\xcb\xd2\x43\xa2\x5e\x47\xf9\xf8\x0c\x00\x00\xff\xff\xcd\x0b\x92\xbb\xd1\x03\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 977, mode: os.FileMode(436), modTime: time.Unix(1647157445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 50, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBankGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\xc9\xf9\x29\x08\x81\x5a\x2e\x2e\xb8\x66\xb7\xd4\xd4\x14\xa8\x01\xc9\xa5\x45\xc5\xf9\x45\x28\xda\x40\x2a\x8a\xad\x14\xa2\x41\x74\x2c\x57\x2d\x20\x00\x00\xff\xff\x55\x04\xf7\xe5\x73\x00\x00\x00")

func typeBankGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBankGraphql,
		"type/bank.graphql",
	)
}

func typeBankGraphql() (*asset, error) {
	bytes, err := typeBankGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank.graphql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBank_transferGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x0e\x29\x4a\xcc\x2b\x4e\x4b\x2d\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x24\x26\x27\xe7\x97\xe6\x95\xf8\xe1\x12\xcf\xb7\x52\xf0\xcc\x2b\x01\x0b\x65\xe6\x26\xa6\xa7\x5a\x41\x28\xae\x5a\x40\x00\x00\x00\xff\xff\x01\x6f\xbd\xff\x62\x00\x00\x00")

func typeBank_transferGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBank_transferGraphql,
		"type/bank_transfer.graphql",
	)
}

func typeBank_transferGraphql() (*asset, error) {
	bytes, err := typeBank_transferGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank_transfer.graphql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCard_identityGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x03\x21\x0c\x05\xd0\xbd\xa7\xf8\x5e\xc3\x6d\x57\xae\xdb\x0b\x0c\x35\x0c\xa1\x4c\x1a\x6c\xa4\x48\x99\xbb\x17\x75\x16\x9d\xba\xd1\xf8\x91\xf7\x63\x55\x09\xf7\x25\xa7\x98\x48\x8c\xad\xe2\xe3\x00\x80\x53\x40\x14\xeb\x73\xfb\x13\x70\xb5\xcc\xb2\xf6\x40\x9e\xa7\x27\x6f\xcb\x4a\x61\x5c\x3d\x28\x2f\xca\xf1\x00\x76\xe7\x58\xb4\x18\xfa\x79\x99\x9b\x86\xfe\xbb\xc2\xad\x2a\xf9\xbf\x22\x7f\x6a\x6a\x54\x6c\xb3\x6f\x3e\x49\xd9\x26\xe0\xd0\x1f\xa6\x43\xd2\xb7\xba\xfd\x1b\x00\x00\xff\xff\xef\x69\xfb\x48\xee\x00\x00\x00")

func typeCard_identityGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCard_identityGraphql,
		"type/card_identity.graphql",
	)
}

func typeCard_identityGraphql() (*asset, error) {
	bytes, err := typeCard_identityGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/card_identity.graphql", size: 238, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCountryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\xce\x2f\xcd\x2b\x29\xaa\x54\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x90\x95\xbb\xa5\xa6\xa6\x40\xb5\x24\x97\x16\x15\xe7\x17\xc1\x15\x82\x85\xc0\x8a\x32\x53\x8b\xad\x14\xa2\xa1\x1a\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xb5\xa0\xc5\x2d\x6f\x00\x00\x00")

func typeCountryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCountryGraphql,
		"type/country.graphql",
	)
}

func typeCountryGraphql() (*asset, error) {
	bytes, err := typeCountryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/country.graphql", size: 111, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDegreeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x49\x4d\x2f\x4a\x4d\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x0e\xf6\x29\x1d\x2c\x00\x00\x00")

func typeDegreeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDegreeGraphql,
		"type/degree.graphql",
	)
}

func typeDegreeGraphql() (*asset, error) {
	bytes, err := typeDegreeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/degree.graphql", size: 44, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeImageGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\xcc\x4d\x4c\x4f\x55\xa8\xe6\x52\x50\x50\x50\x28\x2d\xca\xb1\x52\x08\x2e\x29\xca\xcc\x4b\x07\xf3\xcb\x33\x53\x4a\x32\xac\x14\x3c\xf3\x4a\xc0\xdc\x8c\xd4\xcc\xf4\x8c\x12\x04\x3f\x37\x33\x37\x15\x45\x7d\x72\x62\x41\x49\x66\x7e\x1e\x5c\xac\x96\x8b\x2b\x33\xaf\xa0\xb4\x44\x01\x4c\x7a\x62\xb7\x49\x11\xcd\x2a\x45\x74\xbb\x14\x89\xb4\x0c\x10\x00\x00\xff\xff\x5b\xe8\x7b\x35\xcf\x00\x00\x00")

func typeImageGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImageGraphql,
		"type/image.graphql",
	)
}

func typeImageGraphql() (*asset, error) {
	bytes, err := typeImageGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/image.graphql", size: 207, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeMajorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\x4d\xcc\xca\x2f\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x10\x8a\xdd\x52\x53\x53\xa0\x1a\x92\x4b\x8b\x8a\xf3\x8b\xe0\xca\x40\x42\x60\x25\xc5\x56\x0a\xd1\x60\x46\x2c\x57\x2d\x20\x00\x00\xff\xff\xad\x54\xf4\xa3\x66\x00\x00\x00")

func typeMajorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMajorGraphql,
		"type/major.graphql",
	)
}

func typeMajorGraphql() (*asset, error) {
	bytes, err := typeMajorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/major.graphql", size: 102, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePaymentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf0\x39\xb2\x21\xb1\x74\x61\x81\x0b\x7c\x12\xd3\x5a\x34\x4e\x94\x98\x21\x42\xdc\x1d\x11\x18\xc8\xd0\xc9\xf6\x7f\xfe\xd6\x32\x53\x46\x8b\xac\x46\xcf\x89\x88\x48\x82\xa3\x59\xad\xef\xd5\xaf\x69\x43\xa9\xab\xe4\xf9\x2f\xbe\x42\xef\x97\x02\xad\x37\x2e\x6e\xb8\x3a\x07\x46\xd8\x44\xd9\xd1\xd9\x8a\xe8\xd2\x43\xfb\x7d\x1c\x61\x23\x7c\xea\x07\xef\xd3\x43\xed\x84\xb8\x6f\x69\x10\x89\x58\xd8\x7d\xc7\xf4\x7a\x07\x00\x00\xff\xff\x71\x28\x90\x61\xc7\x00\x00\x00")

func typePaymentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePaymentGraphql,
		"type/payment.graphql",
	)
}

func typePaymentGraphql() (*asset, error) {
	bytes, err := typePaymentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/payment.graphql", size: 199, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRequirementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\xae\xc3\x20\x0c\x44\xf7\x9c\x62\xb8\x46\x6e\x90\xed\xff\xbd\x00\x4a\xac\xc6\x52\x70\x28\xb1\xab\x56\x55\xee\x5e\x01\x8b\xa6\x65\x83\xd0\xb3\x3d\x6f\xf4\x99\x08\x99\x6e\xc6\x99\x22\x89\xe2\xe5\x00\x80\xe7\x01\xa3\x68\xfd\xef\xd3\xb2\xad\x21\xef\x0b\xa7\xf1\x84\xcb\xe5\x80\x7f\xcd\x2c\xd7\x0a\x24\xc4\x6f\x70\x0f\xab\x7d\xc8\xe1\x1c\x89\xc5\xb3\xec\x52\xe4\x4d\xa8\xf4\x68\xb1\xf3\x36\x59\x99\x95\x7d\x96\x64\x8a\xfa\xfe\x75\x15\x9b\xff\x27\xcd\x77\x4d\x7c\x5f\xc5\xbb\xe3\x1d\x00\x00\xff\xff\x0f\x56\xcf\x3b\xf7\x00\x00\x00")

func typeRequirementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRequirementGraphql,
		"type/requirement.graphql",
	)
}

func typeRequirementGraphql() (*asset, error) {
	bytes, err := typeRequirementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/requirement.graphql", size: 247, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeScholarshipGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xcd\x6a\xc3\x30\x0c\xbe\xe7\x29\xfc\x1c\xbe\x15\xba\x41\xcf\x3d\x8e\x1e\x54\x5b\x4b\x05\x89\xec\x49\x32\x23\x8c\xbe\xfb\x48\xdc\x61\xa7\x65\xa7\xe8\xfb\xd1\x27\xc5\xb2\x25\xa3\xd3\x70\x4b\x13\x88\xde\x28\xbb\x9f\xc1\x39\xe7\x28\x7a\x77\x62\xdb\x6a\xcd\x89\x35\xc9\xe9\x95\xf2\xae\x28\xca\xc6\x30\xcc\xe8\xdd\xd9\x84\x78\xdc\x08\x98\x53\x61\xeb\x5a\x0c\xac\x68\xc3\x34\xc3\x88\xbe\x7e\x6a\xc3\x37\x48\x44\x6c\x8e\x50\x44\x90\xed\x90\xf3\x44\x01\xfa\x2c\xa8\x94\x51\xe2\xb3\x81\xd8\x7e\x70\x13\xdf\x38\xee\x25\xe6\x54\x38\xe0\x8c\x6c\x47\xb0\xfd\xc2\x38\xd1\x48\x57\x9a\xc8\x96\x23\x6a\x10\xca\x6b\xc4\xce\xa2\xe5\xaa\x14\xff\x95\x05\xbf\x0a\x49\x4d\x6f\x16\xf5\xee\xa3\x9a\x2e\x9b\xeb\xb3\x70\x24\x1e\x5f\x17\x7f\x08\xcf\x4b\x77\xa9\x6b\x54\x07\x6b\x5e\x86\x65\x05\xfe\xaf\xa8\x6f\x27\x08\x86\xf1\xd0\x26\xdc\x87\xe1\xf9\xd6\xef\x88\xf1\x71\xef\x50\x64\xbb\x67\xff\xb3\xcd\xb8\xce\xed\xe0\x65\xb8\xff\x06\x00\x00\xff\xff\x5d\x3f\x48\x05\x37\x02\x00\x00")

func typeScholarshipGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeScholarshipGraphql,
		"type/scholarship.graphql",
	)
}

func typeScholarshipGraphql() (*asset, error) {
	bytes, err := typeScholarshipGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/scholarship.graphql", size: 567, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSchoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x4e\xce\xc8\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x20\xe5\x28\x02\x89\x29\x29\x45\xa9\xc5\xc5\x28\x62\xc5\x25\x89\x25\xa5\xc5\x10\x53\x6a\xb9\xb8\x90\xac\x70\x4b\x4d\x4d\x81\x5a\x93\x5c\x5a\x54\x9c\x5f\x84\xaa\x0f\xac\xa6\xd8\x4a\x21\x1a\xc2\x8a\xe5\xaa\x05\x04\x00\x00\xff\xff\x08\xdd\xa9\x2c\x9f\x00\x00\x00")

func typeSchoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSchoolGraphql,
		"type/school.graphql",
	)
}

func typeSchoolGraphql() (*asset, error) {
	bytes, err := typeSchoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/school.graphql", size: 159, mode: os.FileMode(436), modTime: time.Unix(1647142064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSponsorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2e\xc8\xcf\x2b\xce\x2f\x72\x4b\x4d\x4d\x51\xa8\xe6\x52\x50\x50\x50\x48\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x41\x15\x15\x5b\x29\x44\x97\x16\xa7\x16\xc5\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x41\x88\xd4\x71\x3d\x00\x00\x00")

func typeSponsorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSponsorGraphql,
		"type/sponsor.graphql",
	)
}

func typeSponsorGraphql() (*asset, error) {
	bytes, err := typeSponsorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/sponsor.graphql", size: 61, mode: os.FileMode(436), modTime: time.Unix(1647154944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xc1\x6e\x22\x31\x0c\x86\xef\xf3\x14\xe1\x35\x72\x43\xa0\x5d\x71\x58\x0e\xcb\xee\xa9\xea\xc1\x9d\xb8\x43\x4a\x62\x47\x89\xe7\x30\xaa\x78\xf7\x6a\x92\x14\x66\x52\xc4\x05\x12\xfb\xfb\xc9\x6f\xff\xc8\x14\x50\x8d\x09\xa3\xfa\xec\x94\x52\xca\x1a\xad\x0e\x24\xf9\x4c\xe0\x51\xab\x93\x44\x4b\x43\x2e\xcc\xb0\xce\xf4\xbf\x29\x60\x2e\xa1\x07\xeb\x56\x50\x38\x33\xe1\x91\xdb\x9a\xb0\x56\xd6\xc3\x50\x64\x3d\xfb\x00\x34\x1d\xdb\x17\x92\x80\x8c\xe9\x6e\xa1\xe7\x91\x24\x4e\x87\x85\xab\xc0\x49\xc0\xed\xd8\xac\x95\x60\x4c\xc4\x94\x56\xb5\x01\xc9\x60\xd4\xf5\xbb\xf8\x95\x33\xd9\x7e\x45\xf5\x10\xcd\xc1\x20\x89\x15\x8b\x49\xab\x97\x45\x61\x7a\xcd\xc8\x1b\xd0\x65\xe9\x61\xbe\x6f\xfb\x6c\xae\x99\x74\xd9\x69\x87\xeb\x23\x82\xa0\xd9\xca\xad\x7a\xed\xba\x1c\x80\xe3\xc1\xd2\x5f\x4c\x81\x29\x61\x4d\x42\xf8\x82\xb4\xd2\xcf\x8b\x2f\xeb\x9f\x85\x48\xa3\xbf\x65\x51\x35\xf9\x07\x38\xd6\x55\x8e\xf3\x0c\x75\x39\xde\xd2\x4d\x54\xd6\x51\x25\x1e\x5c\x89\xe4\x1d\xf3\xf1\xda\x75\x96\xc2\x28\x2a\x7f\xfe\x4f\x18\x77\x25\x83\xdf\x0c\x6e\xfd\x27\xd9\x3c\x80\x4f\xfd\x99\xf9\x9b\x4b\xf9\xa2\x4b\xb7\x74\xee\xcc\x26\x23\x06\x87\x88\x58\x91\x7d\xbe\xdc\x91\x6a\xf0\x83\x63\x05\xfe\xcc\xe7\xa6\x8f\x14\xd9\x39\x8f\x24\x7b\x90\xf5\xc2\x87\x08\x66\x04\xb1\x4c\xcb\x56\x79\x78\x08\xa0\xd5\x2f\xc7\x20\xcd\x14\xad\xcf\xe7\x33\x37\x8e\x9e\xc3\xed\x7c\x0f\xe8\x45\x40\x8b\x5c\x7f\x84\xf4\x15\x00\x00\xff\xff\xd2\x48\x0b\x41\xb7\x03\x00\x00")

func typeUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGraphql,
		"type/user.graphql",
	)
}

func typeUserGraphql() (*asset, error) {
	bytes, err := typeUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.graphql", size: 951, mode: os.FileMode(436), modTime: time.Unix(1647165060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql": mutationGraphql,
	"query.graphql": queryGraphql,
	"schema.graphql": schemaGraphql,
	"type/bank.graphql": typeBankGraphql,
	"type/bank_transfer.graphql": typeBank_transferGraphql,
	"type/card_identity.graphql": typeCard_identityGraphql,
	"type/country.graphql": typeCountryGraphql,
	"type/degree.graphql": typeDegreeGraphql,
	"type/image.graphql": typeImageGraphql,
	"type/major.graphql": typeMajorGraphql,
	"type/payment.graphql": typePaymentGraphql,
	"type/requirement.graphql": typeRequirementGraphql,
	"type/scholarship.graphql": typeScholarshipGraphql,
	"type/school.graphql": typeSchoolGraphql,
	"type/sponsor.graphql": typeSponsorGraphql,
	"type/user.graphql": typeUserGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"bank.graphql": &bintree{typeBankGraphql, map[string]*bintree{}},
		"bank_transfer.graphql": &bintree{typeBank_transferGraphql, map[string]*bintree{}},
		"card_identity.graphql": &bintree{typeCard_identityGraphql, map[string]*bintree{}},
		"country.graphql": &bintree{typeCountryGraphql, map[string]*bintree{}},
		"degree.graphql": &bintree{typeDegreeGraphql, map[string]*bintree{}},
		"image.graphql": &bintree{typeImageGraphql, map[string]*bintree{}},
		"major.graphql": &bintree{typeMajorGraphql, map[string]*bintree{}},
		"payment.graphql": &bintree{typePaymentGraphql, map[string]*bintree{}},
		"requirement.graphql": &bintree{typeRequirementGraphql, map[string]*bintree{}},
		"scholarship.graphql": &bintree{typeScholarshipGraphql, map[string]*bintree{}},
		"school.graphql": &bintree{typeSchoolGraphql, map[string]*bintree{}},
		"sponsor.graphql": &bintree{typeSponsorGraphql, map[string]*bintree{}},
		"user.graphql": &bintree{typeUserGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

