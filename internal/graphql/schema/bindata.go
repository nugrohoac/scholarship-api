// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/applicant.graphql
// type/bank.graphql
// type/bank_transfer.graphql
// type/card_identity.graphql
// type/country.graphql
// type/degree.graphql
// type/ethnic.graphql
// type/image.graphql
// type/major.graphql
// type/payment.graphql
// type/requirement.graphql
// type/scholarship.graphql
// type/school.graphql
// type/sponsor.graphql
// type/user.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6f\xdb\x3c\x0c\xbd\xf7\x57\xa8\xb7\xf6\x2f\xf8\x56\x24\xc5\x87\x00\xdf\x8a\x22\x69\x0f\xc3\xd0\x03\x23\xb1\x0e\x51\x9b\xd2\x24\x6a\x85\x31\xec\xbf\x0f\xb2\x5d\xcb\xb5\xd5\x04\xcb\x25\x30\xf9\xa8\x27\x3d\x3e\x52\x3a\x87\xea\x5b\x14\x10\xb2\xac\x7e\x5f\x29\xa5\xd4\x1e\x6b\x0a\x82\xfe\x39\xa0\xbf\xe9\x23\xe9\x97\x90\x95\x8a\x01\xfd\x53\xe7\xf0\x7a\x8a\x63\x0b\xd4\x54\xea\x20\x9e\xb8\xce\x61\x77\xb2\x8c\x0f\xb6\x90\x80\x10\xde\xad\x37\x9f\x33\xb7\xc3\xd1\x57\xfd\xc7\xb3\x33\x20\xf8\x99\x9e\x4c\xa5\x76\x2c\xf9\x1c\x86\x16\x8b\xb4\x62\x2b\x45\xec\xa2\xec\x5a\xa8\x71\xca\x68\xdb\x3a\xe0\xee\x61\x56\x36\xcb\x45\x16\xdf\xed\x96\x1c\x60\x8c\xc7\x10\x0a\x34\x36\x08\x34\x1b\x6b\x0a\x57\xd0\xe0\xcd\xce\x20\x0b\x09\x61\xa8\xd4\x8f\xfe\x32\x9b\x1c\xed\xae\x5f\x32\xfa\x08\xfc\xb6\xe2\x4d\xc1\x3b\xdd\xdf\xaa\x24\xe1\x3c\x5d\x54\x01\xe5\xc4\xa4\x47\x19\xee\xfb\x8f\x29\x57\x23\x1b\xf4\xd5\xf8\x9f\x7a\x99\xcf\x25\x2f\xa7\x2d\x48\xe1\xc4\x3e\xf5\xd8\x80\xc6\x33\x7d\xbb\xd3\x42\xbf\x56\x9d\x13\xfb\x86\x7c\xa6\x6a\x8f\x01\xe5\x71\x74\xc5\xcd\xbf\xf8\x64\xe3\x11\x04\x0f\xfa\x64\x1b\xf0\xe1\x44\x2e\x57\x07\x67\x39\x58\xbf\x52\xb6\xec\x1a\x68\x93\x96\x0b\x28\x25\xfb\x14\xad\x04\xef\xe0\x0d\xe2\xd2\x2c\xce\x35\xa4\xfb\x41\x3a\x08\x78\x29\xd0\x64\xc4\x3d\x9b\x42\x9e\xd9\x46\xd6\xd8\x22\x4b\xb9\x0d\xd8\x50\x4d\x47\x6a\x48\xba\x2d\x06\xed\xc9\xa5\xc3\xd6\xb8\x10\x8f\x81\xcc\x79\x8c\xc7\x9f\x91\xfc\x40\x96\x71\xc9\xb0\x23\x72\xe6\xd2\xd7\xc8\x86\xb8\xfe\xe2\x5d\x63\xb6\xf8\xa6\x19\xcb\x34\x0b\xfb\x1c\xfb\x20\xb9\xad\x54\xc8\x7d\x1c\xda\x7b\x88\xc7\x96\xe4\xc9\x03\x87\x57\xf4\x8f\xd0\xa5\x82\x59\x8b\x33\x7e\xd5\x66\x19\x8b\xbe\x30\xf3\xa5\xf9\xb9\x30\x7f\x2b\x67\x7c\xbc\xc1\x0d\x77\x5c\xba\xd3\x36\x37\x17\x0c\x38\x2c\xd7\x95\x1f\x4a\xeb\x67\x54\xca\x36\xa3\x48\x28\xd1\xdd\x9b\x38\xd8\x2a\xf3\xa4\x29\x59\xc9\x52\x83\xfb\x8e\xe0\xf7\x08\x21\x3b\x62\xbe\xb8\x10\xfd\x7f\x16\x0a\xeb\x3c\x48\x34\xdd\x66\x58\x93\x03\xa2\x7f\x7d\x9a\xf4\x59\x74\x81\xdf\x62\x10\x62\x28\xdb\x2f\x5d\x70\x10\x67\xf2\xc5\xf3\x14\x9a\x7b\x2f\x01\xb7\x56\xc7\x4f\x16\x1a\x64\x7f\x29\x2d\x21\xe7\x9a\xae\xb8\x13\x8a\x92\x9c\x73\x11\x86\x00\xdd\x4a\x26\x8f\xda\xb6\x2d\xb2\xe9\x1f\xf6\x3f\x8a\xa4\x75\xba\x58\x13\xb7\x53\xd9\x9f\xbf\x01\x00\x00\xff\xff\xb3\x9f\x4a\xc6\x63\x07\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 1891, mode: os.FileMode(420), modTime: time.Unix(1647344384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x41\x4e\xf3\x30\x10\x85\xf7\x3d\xc5\x74\xf7\xe7\x0a\xde\xfd\xa5\x2d\x8a\x04\x12\xb4\x12\x9b\xaa\x0b\xe3\x0c\x89\xa9\xe3\x89\xec\x89\x50\x84\xb8\x3b\x72\x4c\xe3\xb4\x94\xaa\xa0\x66\xe5\x8c\x35\xef\x7b\x7e\x1e\x73\xd7\x20\x3c\xb6\xe8\x3a\x78\x9f\x00\x00\x2c\x91\x55\x35\x93\x76\xf7\xaf\xff\x0d\x9f\xd1\xb5\x66\x01\xb9\xe5\xa1\xa4\x5a\xe7\xc9\x09\x58\xb3\xd3\xb6\x1c\xca\x56\xd6\x78\x50\xcc\x04\x3c\x4b\xbb\x5b\x22\x16\x93\x24\x7f\x43\xad\x65\xd7\x5d\x8b\xa0\xa2\x5c\x82\xdc\x51\xa9\x6d\x52\xc7\x5a\x6a\xb3\x6f\x9a\x0e\xe5\x46\x7a\xff\x46\xae\x38\xdc\xc9\x04\x98\xd0\xbe\x42\xdf\x90\xf5\x18\x15\x57\xe8\xd1\x16\x8b\x20\xf4\x84\x4e\xbf\x68\x25\x59\xd3\x79\x46\x36\xf8\x8c\x27\x27\x57\x12\x3f\x7c\x41\x7f\xd5\x19\x32\x5b\xab\x8a\x8c\x74\xbe\xd2\x4d\xea\xed\x2d\x92\xcb\x8b\x8b\xb2\x3b\x91\xb2\x67\xc9\xad\x17\xb0\xc9\x2d\x6f\xcf\x86\xec\x13\x3f\x05\x7d\x8b\x3c\xf2\x35\xeb\xf2\x79\xf2\xa6\xa3\xa9\xe9\x09\x81\xd1\xb1\xe6\x58\x3a\x44\x01\x9b\xa2\x5f\x6c\x47\x5b\xf7\xf2\x95\xdc\xb5\x66\xa4\x0e\x62\x47\x63\x18\xac\x93\xb9\x0a\x21\x7c\xe1\x29\x9d\x4a\x8d\xcc\x31\x37\xde\xda\x5f\xc0\x07\xc3\x32\x40\xa2\xde\x11\x65\xc1\x95\xd5\x4a\xc0\x26\x2e\xc6\xc9\xfe\x6f\x1a\xa3\x95\xb4\xfc\xd3\x24\xa5\x47\x32\xba\xb5\x6f\x7b\x97\xd9\xce\x04\xc8\x3d\xaf\xb7\xf8\xf1\x19\x00\x00\xff\xff\x6a\x97\x20\x3c\x74\x04\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1140, mode: os.FileMode(420), modTime: time.Unix(1647422170, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeApplicantGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x41\x0a\xc2\x40\x0c\x45\xf7\x39\xc5\x3f\xc7\xac\x45\xe8\xda\xa5\xb8\x08\xd3\x60\x07\xca\x74\x48\x32\x8b\x22\xbd\xbb\x18\xb4\x6a\x37\x21\x0f\x1e\xff\xf9\xda\x04\xdc\xda\x5c\x32\x57\xc7\x83\x00\xa0\x8c\x09\x43\xf5\xf8\xbb\x89\x0e\x07\x4e\x71\x03\x2d\x4f\xcb\xcc\x6a\x53\x69\xbf\x96\x39\x7b\xb7\x2f\xbf\x0a\xeb\x89\x5d\x12\x2e\xae\xa5\xde\x69\x23\xfa\x6f\x9f\x45\xc6\x77\x3f\x77\xb5\x45\x77\xf5\x33\x10\x9a\x25\x5c\x77\xb8\xd1\xf6\x0c\x00\x00\xff\xff\xae\x0c\xc3\xcd\xc1\x00\x00\x00")

func typeApplicantGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeApplicantGraphql,
		"type/applicant.graphql",
	)
}

func typeApplicantGraphql() (*asset, error) {
	bytes, err := typeApplicantGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/applicant.graphql", size: 193, mode: os.FileMode(420), modTime: time.Unix(1647422063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBankGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\xc9\xf9\x29\x08\x81\x5a\x2e\x2e\xb8\x66\xb7\xd4\xd4\x14\xa8\x01\xc9\xa5\x45\xc5\xf9\x45\x28\xda\x40\x2a\x8a\xad\x14\xa2\x41\x74\x2c\x57\x2d\x20\x00\x00\xff\xff\x55\x04\xf7\xe5\x73\x00\x00\x00")

func typeBankGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBankGraphql,
		"type/bank.graphql",
	)
}

func typeBankGraphql() (*asset, error) {
	bytes, err := typeBankGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank.graphql", size: 115, mode: os.FileMode(420), modTime: time.Unix(1641850924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBank_transferGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x0e\x29\x4a\xcc\x2b\x4e\x4b\x2d\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x24\x26\x27\xe7\x97\xe6\x95\xf8\xe1\x12\xcf\xb7\x52\xf0\xcc\x2b\x01\x0b\x65\xe6\x26\xa6\xa7\x5a\x41\x28\xae\x5a\x40\x00\x00\x00\xff\xff\x01\x6f\xbd\xff\x62\x00\x00\x00")

func typeBank_transferGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBank_transferGraphql,
		"type/bank_transfer.graphql",
	)
}

func typeBank_transferGraphql() (*asset, error) {
	bytes, err := typeBank_transferGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank_transfer.graphql", size: 98, mode: os.FileMode(420), modTime: time.Unix(1645108896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCard_identityGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x03\x21\x0c\x05\xd0\xbd\xa7\xf8\x5e\xc3\x6d\x57\xae\xdb\x0b\x0c\x35\x0c\xa1\x4c\x1a\x6c\xa4\x48\x99\xbb\x17\x75\x16\x9d\xba\xd1\xf8\x91\xf7\x63\x55\x09\xf7\x25\xa7\x98\x48\x8c\xad\xe2\xe3\x00\x80\x53\x40\x14\xeb\x73\xfb\x13\x70\xb5\xcc\xb2\xf6\x40\x9e\xa7\x27\x6f\xcb\x4a\x61\x5c\x3d\x28\x2f\xca\xf1\x00\x76\xe7\x58\xb4\x18\xfa\x79\x99\x9b\x86\xfe\xbb\xc2\xad\x2a\xf9\xbf\x22\x7f\x6a\x6a\x54\x6c\xb3\x6f\x3e\x49\xd9\x26\xe0\xd0\x1f\xa6\x43\xd2\xb7\xba\xfd\x1b\x00\x00\xff\xff\xef\x69\xfb\x48\xee\x00\x00\x00")

func typeCard_identityGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCard_identityGraphql,
		"type/card_identity.graphql",
	)
}

func typeCard_identityGraphql() (*asset, error) {
	bytes, err := typeCard_identityGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/card_identity.graphql", size: 238, mode: os.FileMode(420), modTime: time.Unix(1642350756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCountryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\xce\x2f\xcd\x2b\x29\xaa\x54\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x90\x95\xbb\xa5\xa6\xa6\x40\xb5\x24\x97\x16\x15\xe7\x17\xc1\x15\x82\x85\xc0\x8a\x32\x53\x8b\xad\x14\xa2\xa1\x1a\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xb5\xa0\xc5\x2d\x6f\x00\x00\x00")

func typeCountryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCountryGraphql,
		"type/country.graphql",
	)
}

func typeCountryGraphql() (*asset, error) {
	bytes, err := typeCountryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/country.graphql", size: 111, mode: os.FileMode(420), modTime: time.Unix(1641984426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDegreeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x49\x4d\x2f\x4a\x4d\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x0e\xf6\x29\x1d\x2c\x00\x00\x00")

func typeDegreeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDegreeGraphql,
		"type/degree.graphql",
	)
}

func typeDegreeGraphql() (*asset, error) {
	bytes, err := typeDegreeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/degree.graphql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1645633111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeEthnicGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2d\xc9\xc8\xcb\x4c\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x53\xf6\x00\xd4\x2c\x00\x00\x00")

func typeEthnicGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeEthnicGraphql,
		"type/ethnic.graphql",
	)
}

func typeEthnicGraphql() (*asset, error) {
	bytes, err := typeEthnicGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/ethnic.graphql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1647277130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeImageGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\xcc\x4d\x4c\x4f\x55\xa8\xe6\x52\x50\x50\x50\x28\x2d\xca\xb1\x52\x08\x2e\x29\xca\xcc\x4b\x07\xf3\xcb\x33\x53\x4a\x32\xac\x14\x3c\xf3\x4a\xc0\xdc\x8c\xd4\xcc\xf4\x8c\x12\x04\x3f\x37\x33\x37\x15\x45\x7d\x72\x62\x41\x49\x66\x7e\x1e\x5c\xac\x96\x8b\x2b\x33\xaf\xa0\xb4\x44\x01\x4c\x7a\x62\xb7\x49\x11\xcd\x2a\x45\x74\xbb\x14\x89\xb4\x0c\x10\x00\x00\xff\xff\x5b\xe8\x7b\x35\xcf\x00\x00\x00")

func typeImageGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImageGraphql,
		"type/image.graphql",
	)
}

func typeImageGraphql() (*asset, error) {
	bytes, err := typeImageGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/image.graphql", size: 207, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeMajorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\x4d\xcc\xca\x2f\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x10\x8a\xdd\x52\x53\x53\xa0\x1a\x92\x4b\x8b\x8a\xf3\x8b\xe0\xca\x40\x42\x60\x25\xc5\x56\x0a\xd1\x60\x46\x2c\x57\x2d\x20\x00\x00\xff\xff\xad\x54\xf4\xa3\x66\x00\x00\x00")

func typeMajorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMajorGraphql,
		"type/major.graphql",
	)
}

func typeMajorGraphql() (*asset, error) {
	bytes, err := typeMajorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/major.graphql", size: 102, mode: os.FileMode(420), modTime: time.Unix(1645266495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePaymentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf0\x39\xb2\x21\xb1\x74\x61\x81\x0b\x7c\x12\xd3\x5a\x34\x4e\x94\x98\x21\x42\xdc\x1d\x11\x18\xc8\xd0\xc9\xf6\x7f\xfe\xd6\x32\x53\x46\x8b\xac\x46\xcf\x89\x88\x48\x82\xa3\x59\xad\xef\xd5\xaf\x69\x43\xa9\xab\xe4\xf9\x2f\xbe\x42\xef\x97\x02\xad\x37\x2e\x6e\xb8\x3a\x07\x46\xd8\x44\xd9\xd1\xd9\x8a\xe8\xd2\x43\xfb\x7d\x1c\x61\x23\x7c\xea\x07\xef\xd3\x43\xed\x84\xb8\x6f\x69\x10\x89\x58\xd8\x7d\xc7\xf4\x7a\x07\x00\x00\xff\xff\x71\x28\x90\x61\xc7\x00\x00\x00")

func typePaymentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePaymentGraphql,
		"type/payment.graphql",
	)
}

func typePaymentGraphql() (*asset, error) {
	bytes, err := typePaymentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/payment.graphql", size: 199, mode: os.FileMode(420), modTime: time.Unix(1645350005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRequirementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\xae\xc3\x20\x0c\x44\xf7\x9c\x62\xb8\x46\x6e\x90\xed\xff\xbd\x00\x4a\xac\xc6\x52\x70\x28\xb1\xab\x56\x55\xee\x5e\x01\x8b\xa6\x65\x83\xd0\xb3\x3d\x6f\xf4\x99\x08\x99\x6e\xc6\x99\x22\x89\xe2\xe5\x00\x80\xe7\x01\xa3\x68\xfd\xef\xd3\xb2\xad\x21\xef\x0b\xa7\xf1\x84\xcb\xe5\x80\x7f\xcd\x2c\xd7\x0a\x24\xc4\x6f\x70\x0f\xab\x7d\xc8\xe1\x1c\x89\xc5\xb3\xec\x52\xe4\x4d\xa8\xf4\x68\xb1\xf3\x36\x59\x99\x95\x7d\x96\x64\x8a\xfa\xfe\x75\x15\x9b\xff\x27\xcd\x77\x4d\x7c\x5f\xc5\xbb\xe3\x1d\x00\x00\xff\xff\x0f\x56\xcf\x3b\xf7\x00\x00\x00")

func typeRequirementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRequirementGraphql,
		"type/requirement.graphql",
	)
}

func typeRequirementGraphql() (*asset, error) {
	bytes, err := typeRequirementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/requirement.graphql", size: 247, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeScholarshipGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6a\xc3\x30\x0c\xbe\xe7\x29\xfc\x1c\xbe\x15\xba\x41\xcf\x39\x8e\x1e\x54\x5b\x4b\x05\x89\xec\x49\x32\x23\x8c\xbe\xfb\x48\xdc\x12\xa7\xa5\xa7\xf8\xfb\xf1\x97\x0f\x59\x36\x67\x74\x1a\xae\x69\x04\xd1\x2b\x65\xf7\xd7\x39\xe7\x1c\x45\xef\x4e\x6c\xeb\x59\x73\x62\x4d\x72\x7a\xa5\xbc\x2b\x8a\xb2\x32\x0c\x13\x7a\xd7\x9b\x10\x0f\x2b\x01\x53\x2a\x6c\xcd\x15\x03\x2b\xba\x61\x9a\x60\x40\x5f\x3f\xf5\xc2\x2f\x48\x44\xdc\x1c\xa1\x88\x20\xdb\x21\xe7\x91\x02\xb4\x59\x50\x29\xa3\xc4\xbd\x81\xd8\xfe\xc7\x9b\xf8\xc1\x71\x2f\x31\xa7\xc2\x01\x27\x64\x3b\x82\xed\x0b\xe3\x48\x03\x5d\x68\x24\x9b\x8f\xa8\x41\x28\x2f\x11\x3b\x8b\x96\x8b\x52\x7c\x2b\x0b\xfe\x14\x92\x9a\xbe\x59\xd4\xbb\xaf\x6a\x3a\xaf\xae\xef\xc2\x91\x78\x78\x2d\x7e\x17\x9e\x4b\x37\xa9\x4b\x54\x03\x6b\x5e\x86\x79\x01\xfe\x71\xa8\xb3\x13\x04\xc3\x78\x78\x3b\x9a\xbe\x79\x8e\x5b\xd7\x3d\xaf\xc1\x27\x62\xbc\xaf\x42\x28\xb2\x3e\x75\x3b\x87\xcd\xb8\x54\x6a\xe0\xb9\xbb\xfd\x07\x00\x00\xff\xff\xe0\x7c\x39\x9d\x52\x02\x00\x00")

func typeScholarshipGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeScholarshipGraphql,
		"type/scholarship.graphql",
	)
}

func typeScholarshipGraphql() (*asset, error) {
	bytes, err := typeScholarshipGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/scholarship.graphql", size: 594, mode: os.FileMode(420), modTime: time.Unix(1647350569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSchoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x4e\xce\xc8\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x20\xe5\x28\x02\x89\x29\x29\x45\xa9\xc5\xc5\x28\x62\xc5\x25\x89\x25\xa5\xc5\x10\x53\x6a\xb9\xb8\x90\xac\x70\x4b\x4d\x4d\x81\x5a\x93\x5c\x5a\x54\x9c\x5f\x84\xaa\x0f\xac\xa6\xd8\x4a\x21\x1a\xc2\x8a\xe5\xaa\x05\x04\x00\x00\xff\xff\x08\xdd\xa9\x2c\x9f\x00\x00\x00")

func typeSchoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSchoolGraphql,
		"type/school.graphql",
	)
}

func typeSchoolGraphql() (*asset, error) {
	bytes, err := typeSchoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/school.graphql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1645609664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSponsorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2e\xc8\xcf\x2b\xce\x2f\x72\x4b\x4d\x4d\x51\xa8\xe6\x52\x50\x50\x50\x48\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x41\x15\x15\x5b\x29\x44\x97\x16\xa7\x16\xc5\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x41\x88\xd4\x71\x3d\x00\x00\x00")

func typeSponsorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSponsorGraphql,
		"type/sponsor.graphql",
	)
}

func typeSponsorGraphql() (*asset, error) {
	bytes, err := typeSponsorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/sponsor.graphql", size: 61, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x92\xdb\x20\x0c\xbd\xfb\x2b\xd8\xdf\xe0\xb6\xb3\x69\x3b\x39\x34\xd3\x69\xda\x53\xa7\x07\xd5\xa8\x36\x0d\x48\x0c\xc8\x07\x4f\x27\xff\xde\x31\xd0\xc4\xb0\x99\x5c\x0c\x3c\xbd\x27\x24\x3d\x2c\x6b\x40\xb5\x24\x8c\xea\xef\xa0\x94\x52\xd6\x68\x75\x24\xc9\x7b\x02\x8f\x5a\x9d\x25\x5a\x9a\x32\xb0\x91\x75\x66\x7f\x5b\x03\x66\x08\x3d\x58\xd7\x90\xc2\xcc\x84\x27\xee\x31\x61\xad\xac\x87\xa9\xc8\x46\xf6\x01\x68\x3d\xf5\x37\x24\x01\x59\xd2\xbd\x84\x91\x17\x92\xb8\x1e\x77\x55\x05\x4e\x02\xee\x8d\x4d\xab\x04\x63\x22\xa6\xd4\x60\x13\x92\xc1\xa8\xeb\x5a\xea\x95\x99\xec\xb8\xcf\xf7\xcb\x46\x99\x0f\x20\x6d\xba\x8c\x7e\x71\x30\xb6\x70\x91\x6b\xf5\x21\xaf\xa5\x44\x88\xe6\x68\x90\xc4\x8a\xc5\xa4\xd5\x8f\x1d\xb0\xfe\x2c\xc9\x80\x2e\xcd\x95\x40\x97\xd7\x31\xf7\xd6\x0d\x6a\x1f\xe9\x67\x33\x46\x04\x41\xf3\x2a\x37\xf4\x3a\x0c\xd9\x3f\xc7\x93\xa5\xaf\x98\x02\x53\xc2\x6a\xa4\xf0\x05\xa9\xd1\x6f\xbe\x15\xf7\x36\x21\xd2\xe2\x6f\x56\x56\x4d\x4e\xc0\xb1\x3a\xb1\x6c\x3d\xd4\xd9\x7a\x4b\x37\x51\x99\x66\x95\x78\x70\xc5\xd1\xdf\x98\xb7\xd7\x61\xb0\x14\x16\x51\xf9\xfb\x3d\x61\x7c\x2b\x16\x7e\x62\x70\xed\x1b\x7b\x79\x40\x3e\x8f\x33\xf3\x7f\x5e\xca\x07\x5d\xa2\x25\x72\xe7\xbc\x64\x8a\xc1\x29\x22\x56\xca\x21\x1f\xee\x94\x5a\xe0\x1f\x8e\x95\xf0\x79\xdb\x77\x71\xa4\xc8\xce\x79\x24\x79\xf7\x06\xa6\x08\x66\x01\xb1\x4c\xfb\x50\xb9\x78\x0a\xa0\xd5\x47\xc7\x20\x5d\x17\x7d\x9d\xcf\x7b\xee\x2a\x7a\x4e\xee\xfb\x7b\xc0\xde\x19\xb4\xf3\xf5\xb9\x49\xe5\x2d\x77\xff\xff\xf5\x5f\x00\x00\x00\xff\xff\x16\xf0\x28\x13\x19\x04\x00\x00")

func typeUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGraphql,
		"type/user.graphql",
	)
}

func typeUserGraphql() (*asset, error) {
	bytes, err := typeUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.graphql", size: 1049, mode: os.FileMode(420), modTime: time.Unix(1647344384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql":           mutationGraphql,
	"query.graphql":              queryGraphql,
	"schema.graphql":             schemaGraphql,
	"type/applicant.graphql":     typeApplicantGraphql,
	"type/bank.graphql":          typeBankGraphql,
	"type/bank_transfer.graphql": typeBank_transferGraphql,
	"type/card_identity.graphql": typeCard_identityGraphql,
	"type/country.graphql":       typeCountryGraphql,
	"type/degree.graphql":        typeDegreeGraphql,
	"type/ethnic.graphql":        typeEthnicGraphql,
	"type/image.graphql":         typeImageGraphql,
	"type/major.graphql":         typeMajorGraphql,
	"type/payment.graphql":       typePaymentGraphql,
	"type/requirement.graphql":   typeRequirementGraphql,
	"type/scholarship.graphql":   typeScholarshipGraphql,
	"type/school.graphql":        typeSchoolGraphql,
	"type/sponsor.graphql":       typeSponsorGraphql,
	"type/user.graphql":          typeUserGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql":    &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql":   &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"applicant.graphql":     &bintree{typeApplicantGraphql, map[string]*bintree{}},
		"bank.graphql":          &bintree{typeBankGraphql, map[string]*bintree{}},
		"bank_transfer.graphql": &bintree{typeBank_transferGraphql, map[string]*bintree{}},
		"card_identity.graphql": &bintree{typeCard_identityGraphql, map[string]*bintree{}},
		"country.graphql":       &bintree{typeCountryGraphql, map[string]*bintree{}},
		"degree.graphql":        &bintree{typeDegreeGraphql, map[string]*bintree{}},
		"ethnic.graphql":        &bintree{typeEthnicGraphql, map[string]*bintree{}},
		"image.graphql":         &bintree{typeImageGraphql, map[string]*bintree{}},
		"major.graphql":         &bintree{typeMajorGraphql, map[string]*bintree{}},
		"payment.graphql":       &bintree{typePaymentGraphql, map[string]*bintree{}},
		"requirement.graphql":   &bintree{typeRequirementGraphql, map[string]*bintree{}},
		"scholarship.graphql":   &bintree{typeScholarshipGraphql, map[string]*bintree{}},
		"school.graphql":        &bintree{typeSchoolGraphql, map[string]*bintree{}},
		"sponsor.graphql":       &bintree{typeSponsorGraphql, map[string]*bintree{}},
		"user.graphql":          &bintree{typeUserGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
