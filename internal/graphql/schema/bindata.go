// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/applicant.graphql
// type/assessment.graphql
// type/bank.graphql
// type/bank_transfer.graphql
// type/card_identity.graphql
// type/country.graphql
// type/degree.graphql
// type/ethnic.graphql
// type/image.graphql
// type/major.graphql
// type/payment.graphql
// type/report.graphql
// type/requirement.graphql
// type/scholarship.graphql
// type/school.graphql
// type/sponsor.graphql
// type/student.graphql
// type/user.graphql
// type/user_document.graphql
// type/user_school.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xdb\x3c\x0c\xbe\xf7\x29\xdc\x5b\xfb\x0a\xb9\x05\x49\xf0\x23\xc0\xbf\xa2\x48\xda\xc3\x30\x14\x03\x63\x31\x8e\x50\x5b\xd2\x48\xaa\x85\x31\xec\xdd\x07\xd9\xae\xa5\xd8\x6a\xd2\xe5\x12\x98\xfc\x48\x4a\x1f\x3f\x52\xd2\x3a\x2c\xbe\x79\x01\xd1\xd6\x14\xbf\x6f\x8a\xa2\x28\x76\x58\x69\x16\xa4\x67\x46\xba\xeb\x2c\xe1\x17\x90\x8b\xc2\x33\xd2\x53\xeb\xf0\x76\xb4\x63\x03\xba\x5e\x14\x7b\x21\x6d\xaa\x68\x76\x27\x6b\xf0\xc1\x66\x1c\xc0\xfc\x6e\x49\x9d\x7b\xee\xfb\xd4\x37\xdd\xc7\xb3\x53\x20\x78\x5e\x5e\xab\x45\xb1\x35\x12\xf3\x18\x68\x30\x5b\x56\xec\xa2\xd0\xc6\x79\xd9\x36\x50\xe1\xe8\x29\x6d\xe3\xc0\xb4\x0f\x49\x58\xe2\xf3\x46\xa8\xdd\x4e\x6b\x80\x52\x84\xcc\x99\x32\x96\x05\xea\x95\x55\x99\x23\x94\x40\x6a\xab\xd0\x88\x16\x8d\xbc\x28\x7e\x74\x87\x59\x45\x6b\x7b\xfb\x12\xd1\x07\x30\xaf\xb3\xba\xc1\xb8\x2c\xbb\x53\xe5\x28\x4c\xdd\x59\x16\x50\x4e\x46\x97\x03\x0d\x9b\xee\x63\xf4\x55\x68\x14\xd2\x62\xf8\x0f\xbd\x8c\x79\x35\xc9\x69\x0d\x92\xc9\xd8\xb9\x1e\x6b\x28\xf1\x42\xdf\x96\xa5\xe8\xb7\x59\xe7\xc4\xbe\xa2\xb9\x10\xb5\x43\x46\x79\x1c\x54\x71\xf7\x2f\x3a\x59\x11\x82\xe0\xbe\x3c\xd9\x1a\x88\x4f\xda\xc5\x68\x76\xd6\xb0\xa5\x19\xb3\x79\xd5\x40\x13\xb8\x9c\x40\x75\x90\x4f\x56\x4a\xf0\x0e\xa4\x10\xa7\x62\x71\xae\xd6\x65\x37\x48\x7b\x01\x92\x4c\x99\x88\xd8\x18\x95\xf1\x1b\x63\xbd\x29\xb1\x41\x23\xf9\x36\x60\xad\x2b\x7d\xd0\xb5\x96\x76\x8d\x5c\x92\x76\x21\xd9\x1c\xc7\xfe\xc0\x5a\x5d\xc6\x10\xfe\xf2\x9a\xfa\x62\x11\x17\x04\x3b\x20\x13\x95\x1e\xbd\x51\xda\x54\x9f\xdc\x6b\xf0\x66\xef\x94\x54\x19\x67\x61\x17\x6d\x1f\x45\xee\x17\x05\xc7\x3e\xf6\xed\xdd\xfb\x43\xa3\xe5\x89\xc0\xf0\x11\xe9\x11\xda\x10\x90\xb4\x38\xe2\x67\x6d\x96\x21\xe8\x13\x31\x5f\x9b\x9f\x2b\xf3\x37\x53\xc6\xc7\x1d\x5c\x7f\xc6\xa9\x3a\x6d\x7d\x77\x45\x80\xfd\x72\x9d\xe9\x21\xb7\x7e\x06\xa6\x6c\x3d\x90\x84\xe2\xdd\x46\xf9\x5e\x56\xb1\x4e\x98\x92\x19\x2d\x15\xb8\xef\x08\xb4\x43\xe0\xa8\x88\x74\x71\x21\xd2\x7f\x16\x32\xeb\x9c\xc5\xab\x76\xd5\xaf\xc9\x1e\xd1\xdd\x3e\x4c\x7a\x62\x9d\xe0\xd7\xc8\xa2\x0d\xe4\xe5\x17\x0e\xd8\x93\x33\xea\xe2\x79\x34\xa5\xda\x0b\xc0\xb5\x2d\xfd\x99\x84\x7a\xda\x5f\x72\x4b\xc8\xb9\xba\xcd\xee\x84\x2c\x25\x97\x54\x84\xcc\xd0\xce\x68\x22\x2c\x6d\xd3\xa0\x51\xdd\xc5\xfe\x47\x91\xb0\x4e\x27\x6b\xe2\x7e\x0c\x4b\xa4\xbc\x64\x46\xe6\x73\x15\x0f\x3b\xc1\xc8\xfc\xf1\xf9\xf0\x6c\xc6\xa1\x4f\xde\x93\xe5\xdc\xdb\xbe\xcc\x63\xf7\xa5\xa5\x4c\x50\x67\x4e\xe8\x4b\xcf\xda\xbf\xbe\x11\x2a\x20\x9e\x2f\x3c\xc4\xdc\x01\x12\xe3\x24\xdf\xd2\x39\xb2\x6f\xa8\xb2\x3d\x99\x65\x83\x32\xb0\xfa\xb3\x1f\x88\xcf\x52\xae\xac\x39\x6a\x6a\x96\xfd\x1e\xbe\xbe\x12\xb2\xdd\xd8\xa1\xb3\xf4\xa5\x4e\x1c\x75\x9d\x1d\xf7\x5c\x52\x10\x6d\xaa\xaf\x24\xa5\x0e\x99\x3d\xe4\x9f\xbf\x01\x00\x00\xff\xff\x81\x59\x7f\xdb\x96\x09\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 2454, mode: os.FileMode(420), modTime: time.Unix(1650938782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\x9b\x30\x10\xbd\xef\xaf\xf0\xde\x36\x7f\xc1\xb7\xee\x47\xaa\x48\x6d\xd5\x26\x55\x2f\xd1\x1e\x5c\x33\xc0\x34\x30\x83\xc6\x83\x5a\x54\xf5\xbf\x57\xe0\x06\x08\x4b\xa2\xdd\x08\xa9\x1c\x22\x32\x66\xde\x7b\x7e\x7e\x63\x6d\x2a\x30\x5f\x6a\x90\xc6\xfc\xbe\x31\xc6\x98\x35\xa8\xcf\xef\x1d\x1d\xee\xba\xbf\xed\x53\x60\x89\x6a\xcd\x86\xb4\x2f\xf9\x5a\x02\x8b\x35\x3b\x15\xa4\xac\x2f\x93\x2b\xe1\xa4\xb8\xb2\xe6\xbb\xa3\xc3\x1a\x20\xb9\x19\xe0\x1f\xb8\x26\x95\x66\x29\x06\x1f\xe1\x06\x92\x0f\x9c\x21\x0d\xe8\x50\x3a\x2c\x8e\x4d\xb7\x7d\xb9\x72\x21\xfc\x64\x49\x4e\x57\x56\xd6\x14\x6d\xfb\x16\x42\xc5\x14\x20\x22\x6e\x21\x00\x25\x4f\x2d\xd0\x37\x10\x4c\xd1\x3b\x45\xbe\xcc\xb1\xea\x75\xc6\x9d\xb3\x64\xac\x9f\xff\x91\xbe\xa9\xb3\xf5\x6c\xe7\x73\x2e\x9c\x84\x1c\xab\xa1\xb7\x93\xc8\xb2\x49\x5e\xe5\xdd\x8c\xcb\x41\x9d\xd6\xc1\x9a\xfd\x86\xf4\xf9\xa2\xc9\x61\xe0\x1f\x8c\x7e\x0f\x3a\xd2\x75\xdf\x6c\x1e\x07\x6d\x18\x45\xdd\xce\x00\x8c\xb6\xf5\x08\x99\x00\x58\xb3\x4f\xba\x97\xe7\xd1\xd2\x47\xf7\x83\x65\xa9\x8c\x94\x2d\xd8\x24\x86\xad\x74\x2e\x16\x61\x68\x9f\x76\x94\xe6\x5c\xe3\x62\xca\x1b\x4f\xed\x1a\xe2\x00\x4e\x7c\xfe\x15\x7e\xe9\x0b\xa6\x08\x3a\xa1\x7a\xd2\x9c\xd0\x5b\xb3\x8f\x2f\x63\x7b\xdf\x55\x55\x81\xde\x91\x9e\x8b\xd3\x30\x29\xa3\xa3\x7b\xb1\xf6\x06\xed\xb3\x59\x0b\x2c\x6a\xbb\xdf\x5e\xd0\x71\x4b\xee\x58\x38\x09\x5c\xff\xd9\xe5\xb8\xf5\xcd\x63\xe3\xb5\x4e\x60\xbc\xe1\x45\x8c\x8f\xa0\x33\xd9\x3a\x8e\x85\xf3\x07\x4e\x53\xf4\x70\x77\xcd\x84\x9e\x27\x9e\x9b\xc8\x38\x39\xcd\xff\xbe\x2d\x66\x8e\xee\x13\x2b\xa6\xcd\xba\xa6\x04\x29\x7b\x60\x4a\x51\xca\xc9\x25\x7a\x2e\x67\x93\xfb\x70\x07\x94\x2c\x81\xd3\x79\xb5\x85\x8a\x65\x14\x89\x5e\xf9\xd4\xa6\x33\xee\xbd\x2e\x42\x2b\x6b\xa4\x23\xea\xfc\xf8\xf3\x37\x00\x00\xff\xff\x16\xb7\x34\xb1\x76\x07\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1910, mode: os.FileMode(420), modTime: time.Unix(1650939477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeApplicantGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\xb1\x6a\xc5\x30\x0c\xdc\xfd\x15\xfa\x0e\x6f\x85\x52\x78\xd0\xad\x63\xe9\x20\x1c\x91\x67\x88\x65\x23\xc9\x85\x50\xf2\xef\x25\xce\x23\xb1\xb3\x18\xdd\xe9\x7c\x3a\xc9\xd6\x42\x80\xa5\x2c\x31\x20\x1b\xfc\x39\x00\x80\x38\x79\x78\xb0\xb5\xba\x2a\xc9\xe3\x86\x7d\x7b\x1b\xd4\xf0\xcc\x0b\x8a\x3e\x63\xe9\x55\x1d\xed\x7b\x70\x34\x0d\xad\xea\x25\xde\xc7\xaf\xef\x68\xe4\xe1\xcb\x24\xf2\xdc\x58\x52\xc5\x75\x60\x84\x42\x4e\x89\x78\x42\x8b\x99\x3f\xc9\x6c\x8f\x12\x13\xce\x74\xf4\xd1\x22\xcf\x7d\x88\x2c\xa4\x1e\xbe\x5b\xf1\xe3\x36\xe7\xc6\x75\x3f\x88\xa6\xd7\xca\xa1\x8a\x66\x19\xc6\x9d\xb2\xdd\xe2\x04\x97\x4d\x73\x7d\x7d\x67\x4c\x63\xfa\x5f\x5c\x2a\x1d\x51\x36\xe7\x88\x6b\x02\xcd\x62\x6f\xb7\x4b\x37\x0f\xb7\xfd\x07\x00\x00\xff\xff\xf3\x6d\x58\xfb\x86\x01\x00\x00")

func typeApplicantGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeApplicantGraphql,
		"type/applicant.graphql",
	)
}

func typeApplicantGraphql() (*asset, error) {
	bytes, err := typeApplicantGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/applicant.graphql", size: 390, mode: os.FileMode(420), modTime: time.Unix(1650938782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeAssessmentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x0a\xc2\x30\x0c\x86\xef\x79\x8a\xec\x35\x76\x53\xf0\xb0\x8b\x17\x1f\x40\x62\x17\x46\xa0\x4d\x6b\x9b\x0a\x43\xf6\xee\xb2\x30\x10\xc1\x4b\x48\x3e\xf2\x7f\xfc\xa2\xa5\x1b\xfa\x3c\x95\x12\x25\x90\xda\x25\xca\x22\x0f\x89\x62\x2b\xbe\x01\x11\xb1\xf2\xb3\x4b\xe5\xc4\x6a\xd3\x3c\xe2\xa4\x36\x38\x7f\x51\xec\x3c\xe2\x39\xe7\xc8\xa4\x03\x6c\x00\xff\x84\xb7\x90\x2b\x1f\x2a\xa5\xc4\x23\xb6\x9d\x5c\x29\xf1\x8f\xc7\xbd\x1b\x00\x6b\x4f\xdf\x97\x23\x48\x21\x70\x31\xd2\xc0\x7e\x72\x6b\xb4\xfa\xd6\x7a\x29\xb9\x9a\xe8\x72\x9f\x73\xe8\x7b\x49\xe7\x96\x8d\x22\x6c\x9f\x00\x00\x00\xff\xff\x72\xa6\x57\x60\xe2\x00\x00\x00")

func typeAssessmentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAssessmentGraphql,
		"type/assessment.graphql",
	)
}

func typeAssessmentGraphql() (*asset, error) {
	bytes, err := typeAssessmentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/assessment.graphql", size: 226, mode: os.FileMode(420), modTime: time.Unix(1649498616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBankGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\xc9\xf9\x29\x08\x81\x5a\x2e\x2e\xb8\x66\xb7\xd4\xd4\x14\xa8\x01\xc9\xa5\x45\xc5\xf9\x45\x28\xda\x40\x2a\x8a\xad\x14\xa2\x41\x74\x2c\x57\x2d\x20\x00\x00\xff\xff\x55\x04\xf7\xe5\x73\x00\x00\x00")

func typeBankGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBankGraphql,
		"type/bank.graphql",
	)
}

func typeBankGraphql() (*asset, error) {
	bytes, err := typeBankGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank.graphql", size: 115, mode: os.FileMode(420), modTime: time.Unix(1641850924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBank_transferGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x0e\x29\x4a\xcc\x2b\x4e\x4b\x2d\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x24\x26\x27\xe7\x97\xe6\x95\xf8\xe1\x12\xcf\x47\x11\xcd\xcc\x4d\x4c\x4f\xb5\x82\x50\x5c\xb5\x80\x00\x00\x00\xff\xff\x98\x39\xe2\x52\x65\x00\x00\x00")

func typeBank_transferGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBank_transferGraphql,
		"type/bank_transfer.graphql",
	)
}

func typeBank_transferGraphql() (*asset, error) {
	bytes, err := typeBank_transferGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank_transfer.graphql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCard_identityGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x03\x21\x0c\x05\xd0\xbd\xa7\xf8\x5e\xc3\x6d\x57\xae\xdb\x0b\x0c\x35\x0c\xa1\x4c\x1a\x6c\xa4\x48\x99\xbb\x17\x75\x16\x9d\xba\xd1\xf8\x91\xf7\x63\x55\x09\xf7\x25\xa7\x98\x48\x8c\xad\xe2\xe3\x00\x80\x53\x40\x14\xeb\x73\xfb\x13\x70\xb5\xcc\xb2\xf6\x40\x9e\xa7\x27\x6f\xcb\x4a\x61\x5c\x3d\x28\x2f\xca\xf1\x00\x76\xe7\x58\xb4\x18\xfa\x79\x99\x9b\x86\xfe\xbb\xc2\xad\x2a\xf9\xbf\x22\x7f\x6a\x6a\x54\x6c\xb3\x6f\x3e\x49\xd9\x26\xe0\xd0\x1f\xa6\x43\xd2\xb7\xba\xfd\x1b\x00\x00\xff\xff\xef\x69\xfb\x48\xee\x00\x00\x00")

func typeCard_identityGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCard_identityGraphql,
		"type/card_identity.graphql",
	)
}

func typeCard_identityGraphql() (*asset, error) {
	bytes, err := typeCard_identityGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/card_identity.graphql", size: 238, mode: os.FileMode(420), modTime: time.Unix(1642350756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCountryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\xce\x2f\xcd\x2b\x29\xaa\x54\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x90\x95\xbb\xa5\xa6\xa6\x40\xb5\x24\x97\x16\x15\xe7\x17\xc1\x15\x82\x85\xc0\x8a\x32\x53\x8b\xad\x14\xa2\xa1\x1a\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xb5\xa0\xc5\x2d\x6f\x00\x00\x00")

func typeCountryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCountryGraphql,
		"type/country.graphql",
	)
}

func typeCountryGraphql() (*asset, error) {
	bytes, err := typeCountryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/country.graphql", size: 111, mode: os.FileMode(420), modTime: time.Unix(1641984426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDegreeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x49\x4d\x2f\x4a\x4d\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x45\x89\x79\xd9\x10\xe9\x5a\x40\x00\x00\x00\xff\xff\x45\xbe\x50\xd7\x3a\x00\x00\x00")

func typeDegreeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDegreeGraphql,
		"type/degree.graphql",
	)
}

func typeDegreeGraphql() (*asset, error) {
	bytes, err := typeDegreeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/degree.graphql", size: 58, mode: os.FileMode(420), modTime: time.Unix(1649050396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeEthnicGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2d\xc9\xc8\xcb\x4c\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x53\xf6\x00\xd4\x2c\x00\x00\x00")

func typeEthnicGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeEthnicGraphql,
		"type/ethnic.graphql",
	)
}

func typeEthnicGraphql() (*asset, error) {
	bytes, err := typeEthnicGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/ethnic.graphql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1647277130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeImageGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\xcc\x4d\x4c\x4f\x55\xa8\xe6\x52\x50\x50\x50\x28\x2d\xca\xb1\x52\x08\x2e\x29\xca\xcc\x4b\x07\xf3\xcb\x33\x53\x4a\x32\xac\x14\x3c\xf3\x4a\xc0\xdc\x8c\xd4\xcc\xf4\x8c\x12\x04\x3f\x37\x33\x37\x15\x45\x7d\x72\x62\x41\x49\x66\x7e\x1e\x5c\xac\x96\x8b\x2b\x33\xaf\xa0\xb4\x44\x01\x4c\x7a\x62\xb7\x49\x11\xcd\x2a\x45\x74\xbb\x14\x89\xb4\x0c\x10\x00\x00\xff\xff\x5b\xe8\x7b\x35\xcf\x00\x00\x00")

func typeImageGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImageGraphql,
		"type/image.graphql",
	)
}

func typeImageGraphql() (*asset, error) {
	bytes, err := typeImageGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/image.graphql", size: 207, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeMajorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\x4d\xcc\xca\x2f\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x10\x8a\xdd\x52\x53\x53\xa0\x1a\x92\x4b\x8b\x8a\xf3\x8b\xe0\xca\x40\x42\x60\x25\xc5\x56\x0a\xd1\x60\x46\x2c\x57\x2d\x20\x00\x00\xff\xff\xad\x54\xf4\xa3\x66\x00\x00\x00")

func typeMajorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMajorGraphql,
		"type/major.graphql",
	)
}

func typeMajorGraphql() (*asset, error) {
	bytes, err := typeMajorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/major.graphql", size: 102, mode: os.FileMode(420), modTime: time.Unix(1645266495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePaymentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf0\x39\xb2\x21\xb1\x74\x61\x81\x0b\x7c\x12\xd3\x5a\x34\x4e\x94\x98\x21\x42\xdc\x1d\x11\x18\xc8\xd0\xc9\xf6\x7f\xfe\xd6\x32\x53\x46\x8b\xac\x46\xcf\x89\x88\x48\x82\xa3\x59\xad\xef\xd5\xaf\x69\x43\xa9\xab\xe4\xf9\x2f\xbe\x42\xef\x97\x02\xad\x37\x2e\x6e\xb8\x3a\x07\x46\xd8\x44\xd9\xd1\xd9\x8a\xe8\xd2\x43\xfb\x7d\x1c\x61\x23\x7c\xea\x07\xef\xd3\x43\xed\x84\xb8\x6f\x69\x10\x89\x58\xd8\x7d\xc7\xf4\x7a\x07\x00\x00\xff\xff\x71\x28\x90\x61\xc7\x00\x00\x00")

func typePaymentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePaymentGraphql,
		"type/payment.graphql",
	)
}

func typePaymentGraphql() (*asset, error) {
	bytes, err := typePaymentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/payment.graphql", size: 199, mode: os.FileMode(420), modTime: time.Unix(1645350005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeReportGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\xb1\x0a\xc2\x40\x10\x44\xfb\xfd\x8a\xf9\x8e\xeb\x6c\x84\xd4\x96\x62\xb1\xdc\x8d\x61\x21\x5e\x96\xcd\x5a\x88\xe4\xdf\xc5\x44\x24\xdd\xcc\xe3\xf1\xf2\xe5\x44\xd0\xe7\x48\xbc\x05\x00\xac\x15\x0c\x3d\xb7\xad\xee\x93\x55\xed\x39\x1c\xe0\xdd\x26\x16\xd8\x43\x47\x6e\xbf\x06\x35\xd9\x4e\x59\x70\xc9\xb0\x3e\xca\x2a\x72\xe8\x9e\xc9\xf6\x6b\xd7\x67\x2c\x73\xfc\xbd\x2f\xda\x9d\xa5\xe0\xba\xaf\x9b\xac\x9f\x00\x00\x00\xff\xff\x16\xd6\x55\x0c\x94\x00\x00\x00")

func typeReportGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeReportGraphql,
		"type/report.graphql",
	)
}

func typeReportGraphql() (*asset, error) {
	bytes, err := typeReportGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/report.graphql", size: 148, mode: os.FileMode(420), modTime: time.Unix(1650794223, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRequirementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x51\x0e\xc2\x20\x0c\x86\xdf\x39\x45\x77\x8d\xdd\x60\xaf\xea\xbb\x21\x5b\xdd\x9a\xac\x65\xb2\xd6\xcc\x98\xdd\xdd\x00\x89\x4e\x79\x81\x9f\x9f\xc0\xf7\x55\x9f\x0b\x42\xc4\xbb\x51\x44\x46\x51\x78\x39\x00\x00\x1a\x5a\xe8\x44\x73\x5e\xfb\x29\xcc\x3e\xae\x13\x2d\xdd\xa1\x4e\x2f\x5b\x38\x6b\x24\x19\x73\x21\x9e\x7f\x8b\x87\x9f\xed\xdb\xec\xce\xa1\x18\x1f\x61\x97\x04\x2f\x40\xc5\xad\x7c\x3b\x84\xde\xd2\x5d\x3e\x04\xc1\xbc\x47\x2f\x63\x49\xec\x37\x62\xe3\x92\x49\x3e\x39\x08\x5e\xc3\x2d\x41\x48\x16\x53\xc8\xeb\xa9\x9a\xab\x48\xff\x29\x34\x95\x7e\x53\xfb\x37\x6e\x7f\x07\x00\x00\xff\xff\xdd\x6d\x74\xdb\x2c\x01\x00\x00")

func typeRequirementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRequirementGraphql,
		"type/requirement.graphql",
	)
}

func typeRequirementGraphql() (*asset, error) {
	bytes, err := typeRequirementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/requirement.graphql", size: 300, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeScholarshipGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\x83\x30\x0c\xbd\xf3\x15\xf9\x8e\xdc\x2a\x75\x93\x7a\xe6\x38\xf5\xe0\x26\x1e\xb5\x04\x4e\x66\x3b\xda\xaa\xa9\xff\x3e\x41\x98\x08\xad\x7a\xc2\x7e\xef\xf9\xf1\x30\xb6\x5b\x46\xa7\xe1\x9a\x46\x10\xbd\x52\x76\xbf\x9d\x73\xce\x51\xf4\xee\xc4\xb6\xd4\x9a\x13\x6b\x92\xd3\x33\xe4\x5d\x51\x94\x05\x61\x98\xd0\xbb\xde\x84\x78\x58\x00\x98\x52\x61\x6b\x46\x0c\xac\xe8\xd6\x1b\xfe\x58\xbf\x62\xcd\x18\x4d\x30\xa0\xaf\x8f\xea\xf3\x0d\x12\x11\xb7\xc1\x50\x44\x90\xed\x90\xf3\x48\x01\xda\x57\x40\x85\x8c\x12\xf7\x06\x62\xfb\x3c\x1b\xf9\xc6\x71\x4f\x31\xa7\xc2\x01\x27\x64\x3b\x82\xed\xbf\x03\x47\x1a\xe8\x42\x23\xd9\xed\x88\x1a\x84\xf2\x6c\xb1\x93\x68\xb9\x28\xc5\x97\xb4\xe0\x57\x21\xa9\xee\x9b\x44\xbd\xfb\xa8\xa2\xf3\xa2\xfa\x2c\x1c\x89\x87\xe7\xe0\x2b\xf1\x18\xba\x71\x9d\xad\x9a\xb6\xfa\x65\xb8\xcd\x8d\xff\x2f\xea\xee\x04\xc1\x30\x1e\x5e\xae\xa6\x6f\xfe\xd2\xbd\xeb\x1e\xaf\xe3\x1d\x31\xae\x17\x12\x8a\x2c\x17\xd0\xee\x61\x13\xce\x91\x9a\xf6\xdc\xdd\xff\x02\x00\x00\xff\xff\x57\x6f\xe0\xd8\x69\x02\x00\x00")

func typeScholarshipGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeScholarshipGraphql,
		"type/scholarship.graphql",
	)
}

func typeScholarshipGraphql() (*asset, error) {
	bytes, err := typeScholarshipGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/scholarship.graphql", size: 617, mode: os.FileMode(420), modTime: time.Unix(1649756844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSchoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x4e\xce\xc8\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x20\xe5\x28\x02\x89\x29\x29\x45\xa9\xc5\xc5\x28\x62\xc5\x25\x89\x25\xa5\xc5\x10\x53\x6a\xb9\xb8\x90\xac\x70\x4b\x4d\x4d\x81\x5a\x93\x5c\x5a\x54\x9c\x5f\x84\xaa\x0f\xac\xa6\xd8\x4a\x21\x1a\xc2\x8a\xe5\xaa\x05\x04\x00\x00\xff\xff\x08\xdd\xa9\x2c\x9f\x00\x00\x00")

func typeSchoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSchoolGraphql,
		"type/school.graphql",
	)
}

func typeSchoolGraphql() (*asset, error) {
	bytes, err := typeSchoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/school.graphql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1645609664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSponsorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2e\xc8\xcf\x2b\xce\x2f\x72\x4b\x4d\x4d\x51\xa8\xe6\x52\x50\x50\x50\x48\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x41\x15\x15\x5b\x29\x44\x97\x16\xa7\x16\xc5\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x41\x88\xd4\x71\x3d\x00\x00\x00")

func typeSponsorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSponsorGraphql,
		"type/sponsor.graphql",
	)
}

func typeSponsorGraphql() (*asset, error) {
	bytes, err := typeSponsorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/sponsor.graphql", size: 61, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeStudentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\xca\x02\x41\x0c\x04\xe0\x7e\x9f\x22\xcf\x71\xdd\xcf\x2f\x8a\x9d\x60\x29\x16\xf1\x32\xe8\xc2\xde\xee\x91\xe4\x0a\x91\x7b\x77\xe1\x58\xd0\x60\x37\x7c\x4c\x86\xf8\x73\x06\x99\x2f\x82\xea\x7b\x40\xe8\x95\x88\x88\xc6\x45\xad\xe9\x40\x67\xd7\x5c\xef\x1b\xf5\x92\x0d\x74\xe9\xf1\x9a\xd6\x94\xbe\x07\xfa\x71\x96\x81\x8e\xd5\xb7\x5c\x79\x42\x98\xc1\xc4\xb9\x04\x99\x9b\x39\x97\xff\x26\xb1\xc8\x22\x0a\xb3\x60\xb7\xac\xfe\xd8\xb1\xe3\x57\x4f\x85\xc7\xc8\xa3\x82\x1d\xf2\xe7\x51\x59\x01\x3d\x34\xfe\x3c\xb1\xa6\x77\x00\x00\x00\xff\xff\x90\xb8\xcb\xba\x06\x01\x00\x00")

func typeStudentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeStudentGraphql,
		"type/student.graphql",
	)
}

func typeStudentGraphql() (*asset, error) {
	bytes, err := typeStudentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/student.graphql", size: 262, mode: os.FileMode(420), modTime: time.Unix(1649583954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcb\x8e\xdb\x30\x0c\xbc\xfb\x2b\xb4\xbf\xa1\xdb\x62\xd3\x16\x39\x74\x51\x74\xdb\x53\x91\x03\x6b\xb1\x8e\xba\x36\x69\x50\xf4\xc1\x28\xf2\xef\x85\x1e\x4e\x2c\x65\x91\x8b\x2d\x0e\x87\xe6\x50\x9c\x44\xd7\x19\xcd\x12\x50\xcc\xbf\xce\x18\x63\xbc\xb3\xe6\x48\x9a\xce\x04\x13\x5a\xf3\xa6\xe2\x69\x48\x40\x24\xdb\xc4\xfe\xb1\xce\x98\x20\x9c\xc0\x8f\x15\x69\x3e\x33\xe1\x2b\xb7\x98\xb2\x35\x7e\x82\x21\x97\xf5\x3c\xcd\x40\xeb\x6b\xdb\x21\x28\xe8\x12\x6e\x12\x7a\x5e\x48\x65\x3d\xba\x3b\xc8\x6e\x87\xdc\x80\x83\xc2\xf8\xc2\xae\xfe\x1c\x38\x27\x18\x42\x85\x0d\x48\x0e\xc5\x96\x77\x82\x7e\x7b\xd1\xf3\x01\xb4\x2e\x4e\xe8\xb7\x11\xfa\x1a\x16\x50\x4f\x83\x35\x9f\x47\x86\xac\x08\xf5\x4c\xbe\xdf\x6b\xcc\x88\x35\x9f\xd2\x3b\xcb\x06\x71\x47\x87\xa4\x5e\x3d\x06\x6b\x7e\xed\x80\xf5\x94\x1b\x02\xbd\xef\xbf\x12\x63\x9b\x9e\xd7\xf0\xb9\x4f\x53\x37\xd7\xbb\xcf\xb4\x37\xda\x0b\x82\xa2\x7b\xd6\x1a\x05\x41\x94\x2f\x0c\xf5\xee\xe2\x6a\xdf\xfa\x33\xf3\x18\x15\xde\xa2\xd3\x35\x7b\xe0\x7e\x99\x90\x74\xcb\x6f\xf1\xa9\xbb\x74\x5d\x32\xd3\xc8\x83\xa7\xef\x18\x66\xa6\x80\xc5\x55\xca\xef\x48\x77\x9d\xb2\x95\x62\x21\xd2\x32\x5d\x7d\x55\x6a\xd2\x07\x58\x8a\x2d\x96\x78\x53\x65\xa7\x93\xa7\x6b\x51\xde\x62\x29\x99\x60\xcc\xf6\xfa\x83\xe9\x78\xe9\x3a\x4f\xf3\xa2\x26\x3d\x7f\x06\x94\x97\xec\x99\x38\x78\x6d\xf8\xa7\x0f\xc8\x79\xf6\x4d\x4e\x0a\x6c\xce\xe6\xcc\x8d\xf3\x94\x28\x0e\x07\x41\x2c\x94\x43\x0a\x6e\x94\x22\xf0\x2f\x4b\x21\x7c\x8d\xe7\x26\x8f\x24\x3c\x8e\xf1\x3e\xef\xdc\x38\x08\xb8\x05\xd4\x33\xed\x53\xb9\xf1\x30\xc3\xe6\xc7\x7a\x8a\x56\xe7\xe3\x99\x1b\x45\x8f\xc9\xed\x7c\x1f\xb0\x77\x0b\xda\xed\xf5\xf1\x92\xf2\x2f\xa6\xf9\x33\xba\xfc\x0f\x00\x00\xff\xff\xfc\x1a\x82\x01\xa6\x04\x00\x00")

func typeUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGraphql,
		"type/user.graphql",
	)
}

func typeUserGraphql() (*asset, error) {
	bytes, err := typeUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.graphql", size: 1190, mode: os.FileMode(420), modTime: time.Unix(1650938782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUser_documentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2d\x4e\x2d\x72\xc9\x4f\x2e\xcd\x4d\xcd\x2b\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\x41\xd2\x9e\x48\xfc\x14\xa8\x52\x2b\x85\xcc\xdc\xc4\xf4\x54\xae\x5a\x40\x00\x00\x00\xff\xff\x4c\x8a\xd9\xa7\x45\x00\x00\x00")

func typeUser_documentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUser_documentGraphql,
		"type/user_document.graphql",
	)
}

func typeUser_documentGraphql() (*asset, error) {
	bytes, err := typeUser_documentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user_document.graphql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUser_schoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8a\x31\x0e\xc2\x40\x0c\x04\xfb\xbc\x62\x1f\xc0\x0b\x5c\x23\xa4\xd4\x79\x81\xc5\x59\xc7\xa1\x8b\x1d\x39\x4e\x81\x10\x7f\x47\xc4\x29\x28\x52\x8d\x76\x66\xe3\xb5\x08\xb6\x55\x7c\xba\x3f\xcc\x3a\xde\x03\x00\xb4\x42\x18\x35\x2e\xfb\xf8\xd5\xf1\x5f\xac\xfb\x95\x0e\xa6\x2b\x52\x5d\x84\x0e\xa6\x9b\xf9\x69\x4e\x89\x34\xa2\x6e\xbd\xcf\xa2\x71\xe5\x10\xc2\x14\xde\xb4\x66\xab\xce\x65\xe3\x68\xa6\x27\x6d\x61\xc2\xad\x1b\xc7\xf0\xf9\x06\x00\x00\xff\xff\x46\x48\x4d\x37\xb2\x00\x00\x00")

func typeUser_schoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUser_schoolGraphql,
		"type/user_school.graphql",
	)
}

func typeUser_schoolGraphql() (*asset, error) {
	bytes, err := typeUser_schoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user_school.graphql", size: 178, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql":           mutationGraphql,
	"query.graphql":              queryGraphql,
	"schema.graphql":             schemaGraphql,
	"type/applicant.graphql":     typeApplicantGraphql,
	"type/assessment.graphql":    typeAssessmentGraphql,
	"type/bank.graphql":          typeBankGraphql,
	"type/bank_transfer.graphql": typeBank_transferGraphql,
	"type/card_identity.graphql": typeCard_identityGraphql,
	"type/country.graphql":       typeCountryGraphql,
	"type/degree.graphql":        typeDegreeGraphql,
	"type/ethnic.graphql":        typeEthnicGraphql,
	"type/image.graphql":         typeImageGraphql,
	"type/major.graphql":         typeMajorGraphql,
	"type/payment.graphql":       typePaymentGraphql,
	"type/report.graphql":        typeReportGraphql,
	"type/requirement.graphql":   typeRequirementGraphql,
	"type/scholarship.graphql":   typeScholarshipGraphql,
	"type/school.graphql":        typeSchoolGraphql,
	"type/sponsor.graphql":       typeSponsorGraphql,
	"type/student.graphql":       typeStudentGraphql,
	"type/user.graphql":          typeUserGraphql,
	"type/user_document.graphql": typeUser_documentGraphql,
	"type/user_school.graphql":   typeUser_schoolGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql":    &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql":   &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"applicant.graphql":     &bintree{typeApplicantGraphql, map[string]*bintree{}},
		"assessment.graphql":    &bintree{typeAssessmentGraphql, map[string]*bintree{}},
		"bank.graphql":          &bintree{typeBankGraphql, map[string]*bintree{}},
		"bank_transfer.graphql": &bintree{typeBank_transferGraphql, map[string]*bintree{}},
		"card_identity.graphql": &bintree{typeCard_identityGraphql, map[string]*bintree{}},
		"country.graphql":       &bintree{typeCountryGraphql, map[string]*bintree{}},
		"degree.graphql":        &bintree{typeDegreeGraphql, map[string]*bintree{}},
		"ethnic.graphql":        &bintree{typeEthnicGraphql, map[string]*bintree{}},
		"image.graphql":         &bintree{typeImageGraphql, map[string]*bintree{}},
		"major.graphql":         &bintree{typeMajorGraphql, map[string]*bintree{}},
		"payment.graphql":       &bintree{typePaymentGraphql, map[string]*bintree{}},
		"report.graphql":        &bintree{typeReportGraphql, map[string]*bintree{}},
		"requirement.graphql":   &bintree{typeRequirementGraphql, map[string]*bintree{}},
		"scholarship.graphql":   &bintree{typeScholarshipGraphql, map[string]*bintree{}},
		"school.graphql":        &bintree{typeSchoolGraphql, map[string]*bintree{}},
		"sponsor.graphql":       &bintree{typeSponsorGraphql, map[string]*bintree{}},
		"student.graphql":       &bintree{typeStudentGraphql, map[string]*bintree{}},
		"user.graphql":          &bintree{typeUserGraphql, map[string]*bintree{}},
		"user_document.graphql": &bintree{typeUser_documentGraphql, map[string]*bintree{}},
		"user_school.graphql":   &bintree{typeUser_schoolGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
