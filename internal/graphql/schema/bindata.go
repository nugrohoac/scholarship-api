// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/applicant.graphql
// type/assessment.graphql
// type/bank.graphql
// type/bank_transfer.graphql
// type/card_identity.graphql
// type/country.graphql
// type/degree.graphql
// type/ethnic.graphql
// type/image.graphql
// type/major.graphql
// type/payment.graphql
// type/requirement.graphql
// type/scholarship.graphql
// type/school.graphql
// type/sponsor.graphql
// type/student.graphql
// type/user.graphql
// type/user_document.graphql
// type/user_school.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xdb\x3c\x0c\xbe\xf7\x29\xdc\x5b\xfb\x0a\xb9\x05\x49\xf0\x23\xc0\xbf\xa2\x48\xda\xc3\x30\xf4\xc0\x58\x8c\x23\xd4\x96\x34\x92\x6a\x61\x0c\x7b\xf7\x41\xb6\x63\x29\xb6\x9a\x6c\xb9\x04\x26\x3f\x92\xd2\xc7\x8f\x94\xb4\x0e\x8b\x6f\x5e\x40\xb4\x35\xc5\xaf\xbb\xa2\x28\x8a\x1d\x56\x9a\x05\xe9\x95\x91\x1e\x3a\x4b\xf8\x05\xe4\xa2\xf0\x8c\xf4\xd2\x3a\xbc\x1f\xed\xd8\x80\xae\x17\xc5\x5e\x48\x9b\x2a\x9a\xdd\xc9\x1a\x7c\xb2\x19\x07\x30\x7f\x5a\x52\x97\x9e\xc7\x3e\xf5\x5d\xf7\xf1\xea\x14\x08\x5e\x96\xd7\x6a\x51\x6c\x8d\xc4\x3c\x06\x1a\xcc\x96\x15\xbb\x28\xb4\x71\x5e\xb6\x0d\x54\x38\x7a\x4a\xdb\x38\x30\xed\x53\x12\x96\xf8\xbc\x11\x6a\xb7\xd3\x1a\xa0\x14\x21\x73\xa6\x8c\x65\x81\x7a\x65\x55\xe6\x08\x25\x90\xda\x2a\x34\xa2\x45\x23\x2f\x8a\x1f\xdd\x61\x56\xd1\xda\xde\xbf\x45\xf4\x01\xcc\xfb\xac\x6e\x30\x2e\xcb\xee\x54\x39\x0a\x53\x77\x96\x05\x94\x93\xd1\xe5\x40\xc3\xa6\xfb\x18\x7d\x15\x1a\x85\xb4\x18\xfe\x43\x2f\x63\x5e\x4d\x72\x5a\x83\x64\x32\x76\xae\xe7\x1a\x4a\xbc\xd2\xb7\x65\x29\xfa\x63\xd6\x39\xb1\xef\x68\xae\x44\xed\x90\x51\x9e\x07\x55\x3c\xfc\x8b\x4e\x56\x84\x20\xb8\x2f\x4f\xb6\x06\xe2\x93\x76\x31\x9a\x9d\x35\x6c\x69\xc6\x6c\x5e\x35\xd0\x04\x2e\x27\x50\x1d\xe4\x93\x95\x12\x7c\x02\x29\xc4\xa9\x58\x9c\xab\x75\xd9\x0d\xd2\x5e\x80\x24\x53\x26\x22\x36\x46\x65\xfc\xc6\x58\x6f\x4a\x6c\xd0\x48\xbe\x0d\x58\xeb\x4a\x1f\x74\xad\xa5\x5d\x23\x97\xa4\x5d\x48\x36\xc7\xb1\x3f\xb0\x56\xd7\x31\x84\x3f\xbd\xa6\xbe\x58\xc4\x05\xc1\x0e\xc8\x44\xa5\x47\x6f\x94\x36\xd5\x17\xf7\x1a\xbc\xd9\x3b\x25\x55\xc6\x59\xd8\x45\xdb\xb9\xc8\xe3\xa2\xe0\xd8\xc7\xbe\xbd\x7b\x7f\x68\xb4\xbc\x10\x18\x3e\x22\x3d\x43\x1b\x02\x92\x16\x47\xfc\xac\xcd\x32\x04\x7d\x21\xe6\x5b\xf3\x73\x63\xfe\x66\xca\x38\xdf\xc1\xf5\x67\x9c\xaa\xd3\xd6\x0f\x37\x04\xd8\x2f\xd7\x99\x1e\x72\xeb\x67\x60\xca\xd6\x03\x49\x28\xde\x6d\x94\xef\x65\x15\xeb\x84\x29\x99\xd1\x52\x81\xfb\x8e\x40\x3b\x04\x8e\x8a\x48\x17\x17\x22\xfd\x67\x21\xb3\xce\x59\xbc\x6a\x57\xfd\x9a\xec\x11\xdd\xed\xc3\xa4\x27\xd6\x09\x7e\x8d\x2c\xda\x40\x5e\x7e\xe1\x80\x3d\x39\xa3\x2e\x5e\x47\x53\xaa\xbd\x00\x5c\xdb\xd2\x5f\x48\xa8\xa7\xfd\x2d\xb7\x84\x9c\xab\xdb\xec\x4e\xc8\x52\x72\x4d\x45\xc8\x0c\xed\x8c\x26\xc2\xd2\x36\x0d\x1a\xd5\x5d\xec\x7f\x14\x09\xeb\x74\xb2\x26\x1e\xc7\xb0\x44\xca\x4b\x66\x64\xbe\x54\xf1\xb0\x13\x8c\xcc\x1f\x9f\xb3\x67\x33\x0e\x7d\xf2\x9e\x2c\xe7\xde\xf6\x6d\x1e\xbb\x2f\x2d\x65\x82\x3a\x73\x42\x5f\x7a\xd6\xfe\xf5\x8d\x50\x01\xf1\x7c\xe5\x21\xe6\x0e\x90\x18\x27\xf9\x96\xce\x91\xfd\x40\x95\xed\xc9\x45\xb6\x49\xe0\xca\x9a\xa3\xa6\x66\xd9\x6f\xdb\xdb\x83\x9f\xe5\x7c\x87\xce\xd2\x5f\xf1\x7d\xd4\x75\x76\xa8\xcf\x49\x7f\xff\x09\x00\x00\xff\xff\xfc\xb2\x8b\xc4\x2c\x09\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 2348, mode: os.FileMode(420), modTime: time.Unix(1650787248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\xd3\x30\x10\xbd\xef\xaf\xf0\xde\xb6\x7f\xc1\x37\xf6\xa3\xa8\x12\x20\xd8\x22\x2e\xd5\x1e\x8c\x3d\x49\x86\x26\x33\x91\x3d\x11\x44\x88\xff\x8e\x5c\xd3\x38\xcd\xa6\x15\xbb\x44\x22\x87\x2a\x1d\x67\xde\x7b\x7e\x7e\x63\xe9\x5b\x50\x9f\x3a\xf0\xbd\xfa\x79\xa5\x94\x52\x6b\x10\x5b\xdd\x1a\xda\xdf\x1c\xfe\xc6\xa7\xc6\x06\x45\xab\x0d\xc9\x50\xb2\x9d\x0f\xec\xb5\xda\x8a\x47\x2a\x87\x32\x99\x06\x4e\x8a\x2b\xad\xbe\x1a\xda\xaf\x01\xdc\x55\x86\xbf\xe3\x8e\xc4\xf7\x4b\x31\xd8\x04\x97\x49\xde\x71\x89\x94\xd1\xa1\x31\x58\x1f\x9b\xae\x87\x72\x6b\x42\xf8\xce\xde\x9d\xae\xac\xb4\xaa\x63\xfb\x23\x84\x96\x29\x40\x42\x7c\x84\x00\xe4\x1e\x22\xd0\x17\xf0\x58\xa0\x35\x82\x7c\x99\x63\x35\xe8\x4c\x3b\x67\x5f\xb2\x7c\xfc\x43\xfa\xa2\xce\xe8\xd9\xd6\x56\x5c\x1b\x1f\x2a\x6c\x73\xef\x41\x22\xfb\x8d\xfb\x2b\xef\x66\x5c\x0e\x62\xa4\x0b\x5a\xed\x36\x24\x4f\x17\x4d\x0e\x99\x3f\x1b\xfd\x16\x64\xa4\xeb\xb6\xdf\xdc\x67\x6d\x98\x44\x5d\xcf\x00\x8c\xb6\x75\x0f\xa5\x07\xd0\x6a\xe7\x0e\x2f\x4f\xa3\xa5\xf7\xe6\x1b\xfb\xa5\x32\xd2\x44\xb0\x49\x0c\xa3\x74\xae\x17\x61\x88\x4f\x1c\xa5\x39\xd7\xb8\x9e\xf2\xa6\x53\x7b\x0d\x71\x00\xe3\x6d\xf5\x19\x7e\xc8\x33\xa6\x04\x3a\xa1\x7a\x90\x8a\xd0\x6a\xb5\x4b\x2f\x63\x7b\xdf\xb4\x6d\x8d\xd6\x90\x9c\x8b\x53\x9e\x94\xd1\xd1\x3d\x5b\x7b\x81\xf6\xd9\xac\x05\xf6\xa2\x0f\xbf\x83\xa0\xe3\x96\xcc\xb1\x70\x12\xb8\xe1\xb3\xcb\x71\x1b\x9a\xc7\xc6\x4b\xe7\x60\xbc\xe1\x45\x8c\x4f\xa0\x33\xd9\x3a\x8e\x85\xb1\x7b\x2e\x0a\xb4\x70\xf3\x9a\x09\x3d\x4f\x3c\x37\x91\x69\x72\xfa\xff\x7d\x5b\xcc\x1c\xdd\x07\x16\x2c\xfa\x75\x47\x0e\xa9\xbc\x63\x2a\xd0\x37\x93\x4b\xf4\x5c\xce\x26\xf7\xe1\x16\xc8\xfd\x23\xce\xaf\xdf\x01\x00\x00\xff\xff\xcd\xfe\xe2\x94\xf8\x06\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1784, mode: os.FileMode(420), modTime: time.Unix(1650269192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeApplicantGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\xaa\x84\x30\x0c\x85\xf7\x7d\x8a\x3c\x47\x77\x17\x2e\x17\x84\xbb\x9b\xe5\x30\x8b\x50\x83\x16\xec\x0f\x49\x3a\x20\x83\xef\x3e\x58\x45\xad\x9b\x92\x93\x9e\x7e\xc9\xa9\xce\x99\x00\x73\x9e\xbc\xc3\xa8\xf0\x31\x00\x00\xbe\xb7\xd0\x45\xad\x75\x11\xe2\xee\xa6\x6d\x3d\xab\x14\x37\xa6\x09\x59\x46\x9f\xaf\xae\x4b\xdb\x5e\xc5\x76\xa9\xa8\x45\x4e\xf3\x3a\x7e\xfe\x45\x25\x0b\x0f\x65\x1f\x87\xda\x25\x11\x9c\x9b\x0e\x93\x4b\x21\x50\xec\x51\x7d\x8a\xff\xa4\xba\xae\xe2\x03\x0e\xb4\x0f\x4d\x4c\x62\xe1\x59\x8b\x97\x59\x8c\x69\xe3\xfd\x11\xf5\x7b\x44\x57\x58\x12\x37\xf8\xc3\xb6\x22\x0e\x71\x62\x2a\x75\x7f\x1e\x31\xb4\xdb\xbe\x71\x2a\xb4\x45\x5a\x8c\xa1\x58\x02\x48\x62\xfd\xb9\xfd\x6c\x65\x98\xe5\x1b\x00\x00\xff\xff\xb4\x28\xe4\x1d\x76\x01\x00\x00")

func typeApplicantGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeApplicantGraphql,
		"type/applicant.graphql",
	)
}

func typeApplicantGraphql() (*asset, error) {
	bytes, err := typeApplicantGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/applicant.graphql", size: 374, mode: os.FileMode(420), modTime: time.Unix(1650007007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeAssessmentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x0a\xc2\x30\x0c\x86\xef\x79\x8a\xec\x35\x76\x53\xf0\xb0\x8b\x17\x1f\x40\x62\x17\x46\xa0\x4d\x6b\x9b\x0a\x43\xf6\xee\xb2\x30\x10\xc1\x4b\x48\x3e\xf2\x7f\xfc\xa2\xa5\x1b\xfa\x3c\x95\x12\x25\x90\xda\x25\xca\x22\x0f\x89\x62\x2b\xbe\x01\x11\xb1\xf2\xb3\x4b\xe5\xc4\x6a\xd3\x3c\xe2\xa4\x36\x38\x7f\x51\xec\x3c\xe2\x39\xe7\xc8\xa4\x03\x6c\x00\xff\x84\xb7\x90\x2b\x1f\x2a\xa5\xc4\x23\xb6\x9d\x5c\x29\xf1\x8f\xc7\xbd\x1b\x00\x6b\x4f\xdf\x97\x23\x48\x21\x70\x31\xd2\xc0\x7e\x72\x6b\xb4\xfa\xd6\x7a\x29\xb9\x9a\xe8\x72\x9f\x73\xe8\x7b\x49\xe7\x96\x8d\x22\x6c\x9f\x00\x00\x00\xff\xff\x72\xa6\x57\x60\xe2\x00\x00\x00")

func typeAssessmentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAssessmentGraphql,
		"type/assessment.graphql",
	)
}

func typeAssessmentGraphql() (*asset, error) {
	bytes, err := typeAssessmentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/assessment.graphql", size: 226, mode: os.FileMode(420), modTime: time.Unix(1649498616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBankGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\xc9\xf9\x29\x08\x81\x5a\x2e\x2e\xb8\x66\xb7\xd4\xd4\x14\xa8\x01\xc9\xa5\x45\xc5\xf9\x45\x28\xda\x40\x2a\x8a\xad\x14\xa2\x41\x74\x2c\x57\x2d\x20\x00\x00\xff\xff\x55\x04\xf7\xe5\x73\x00\x00\x00")

func typeBankGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBankGraphql,
		"type/bank.graphql",
	)
}

func typeBankGraphql() (*asset, error) {
	bytes, err := typeBankGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank.graphql", size: 115, mode: os.FileMode(420), modTime: time.Unix(1641850924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBank_transferGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x0e\x29\x4a\xcc\x2b\x4e\x4b\x2d\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x24\x26\x27\xe7\x97\xe6\x95\xf8\xe1\x12\xcf\x47\x11\xcd\xcc\x4d\x4c\x4f\xb5\x82\x50\x5c\xb5\x80\x00\x00\x00\xff\xff\x98\x39\xe2\x52\x65\x00\x00\x00")

func typeBank_transferGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBank_transferGraphql,
		"type/bank_transfer.graphql",
	)
}

func typeBank_transferGraphql() (*asset, error) {
	bytes, err := typeBank_transferGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank_transfer.graphql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCard_identityGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x03\x21\x0c\x05\xd0\xbd\xa7\xf8\x5e\xc3\x6d\x57\xae\xdb\x0b\x0c\x35\x0c\xa1\x4c\x1a\x6c\xa4\x48\x99\xbb\x17\x75\x16\x9d\xba\xd1\xf8\x91\xf7\x63\x55\x09\xf7\x25\xa7\x98\x48\x8c\xad\xe2\xe3\x00\x80\x53\x40\x14\xeb\x73\xfb\x13\x70\xb5\xcc\xb2\xf6\x40\x9e\xa7\x27\x6f\xcb\x4a\x61\x5c\x3d\x28\x2f\xca\xf1\x00\x76\xe7\x58\xb4\x18\xfa\x79\x99\x9b\x86\xfe\xbb\xc2\xad\x2a\xf9\xbf\x22\x7f\x6a\x6a\x54\x6c\xb3\x6f\x3e\x49\xd9\x26\xe0\xd0\x1f\xa6\x43\xd2\xb7\xba\xfd\x1b\x00\x00\xff\xff\xef\x69\xfb\x48\xee\x00\x00\x00")

func typeCard_identityGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCard_identityGraphql,
		"type/card_identity.graphql",
	)
}

func typeCard_identityGraphql() (*asset, error) {
	bytes, err := typeCard_identityGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/card_identity.graphql", size: 238, mode: os.FileMode(420), modTime: time.Unix(1642350756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCountryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\xce\x2f\xcd\x2b\x29\xaa\x54\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x90\x95\xbb\xa5\xa6\xa6\x40\xb5\x24\x97\x16\x15\xe7\x17\xc1\x15\x82\x85\xc0\x8a\x32\x53\x8b\xad\x14\xa2\xa1\x1a\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xb5\xa0\xc5\x2d\x6f\x00\x00\x00")

func typeCountryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCountryGraphql,
		"type/country.graphql",
	)
}

func typeCountryGraphql() (*asset, error) {
	bytes, err := typeCountryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/country.graphql", size: 111, mode: os.FileMode(420), modTime: time.Unix(1641984426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDegreeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x49\x4d\x2f\x4a\x4d\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x45\x89\x79\xd9\x10\xe9\x5a\x40\x00\x00\x00\xff\xff\x45\xbe\x50\xd7\x3a\x00\x00\x00")

func typeDegreeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDegreeGraphql,
		"type/degree.graphql",
	)
}

func typeDegreeGraphql() (*asset, error) {
	bytes, err := typeDegreeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/degree.graphql", size: 58, mode: os.FileMode(420), modTime: time.Unix(1649050396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeEthnicGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2d\xc9\xc8\xcb\x4c\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x53\xf6\x00\xd4\x2c\x00\x00\x00")

func typeEthnicGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeEthnicGraphql,
		"type/ethnic.graphql",
	)
}

func typeEthnicGraphql() (*asset, error) {
	bytes, err := typeEthnicGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/ethnic.graphql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1647277130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeImageGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\xcc\x4d\x4c\x4f\x55\xa8\xe6\x52\x50\x50\x50\x28\x2d\xca\xb1\x52\x08\x2e\x29\xca\xcc\x4b\x07\xf3\xcb\x33\x53\x4a\x32\xac\x14\x3c\xf3\x4a\xc0\xdc\x8c\xd4\xcc\xf4\x8c\x12\x04\x3f\x37\x33\x37\x15\x45\x7d\x72\x62\x41\x49\x66\x7e\x1e\x5c\xac\x96\x8b\x2b\x33\xaf\xa0\xb4\x44\x01\x4c\x7a\x62\xb7\x49\x11\xcd\x2a\x45\x74\xbb\x14\x89\xb4\x0c\x10\x00\x00\xff\xff\x5b\xe8\x7b\x35\xcf\x00\x00\x00")

func typeImageGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImageGraphql,
		"type/image.graphql",
	)
}

func typeImageGraphql() (*asset, error) {
	bytes, err := typeImageGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/image.graphql", size: 207, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeMajorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\x4d\xcc\xca\x2f\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x10\x8a\xdd\x52\x53\x53\xa0\x1a\x92\x4b\x8b\x8a\xf3\x8b\xe0\xca\x40\x42\x60\x25\xc5\x56\x0a\xd1\x60\x46\x2c\x57\x2d\x20\x00\x00\xff\xff\xad\x54\xf4\xa3\x66\x00\x00\x00")

func typeMajorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMajorGraphql,
		"type/major.graphql",
	)
}

func typeMajorGraphql() (*asset, error) {
	bytes, err := typeMajorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/major.graphql", size: 102, mode: os.FileMode(420), modTime: time.Unix(1645266495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePaymentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf0\x39\xb2\x21\xb1\x74\x61\x81\x0b\x7c\x12\xd3\x5a\x34\x4e\x94\x98\x21\x42\xdc\x1d\x11\x18\xc8\xd0\xc9\xf6\x7f\xfe\xd6\x32\x53\x46\x8b\xac\x46\xcf\x89\x88\x48\x82\xa3\x59\xad\xef\xd5\xaf\x69\x43\xa9\xab\xe4\xf9\x2f\xbe\x42\xef\x97\x02\xad\x37\x2e\x6e\xb8\x3a\x07\x46\xd8\x44\xd9\xd1\xd9\x8a\xe8\xd2\x43\xfb\x7d\x1c\x61\x23\x7c\xea\x07\xef\xd3\x43\xed\x84\xb8\x6f\x69\x10\x89\x58\xd8\x7d\xc7\xf4\x7a\x07\x00\x00\xff\xff\x71\x28\x90\x61\xc7\x00\x00\x00")

func typePaymentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePaymentGraphql,
		"type/payment.graphql",
	)
}

func typePaymentGraphql() (*asset, error) {
	bytes, err := typePaymentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/payment.graphql", size: 199, mode: os.FileMode(420), modTime: time.Unix(1645350005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRequirementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x51\x0e\xc2\x20\x0c\x86\xdf\x39\x45\x77\x8d\xdd\x60\xaf\xea\xbb\x21\x5b\xdd\x9a\xac\x65\xb2\xd6\xcc\x98\xdd\xdd\x00\x89\x4e\x79\x81\x9f\x9f\xc0\xf7\x55\x9f\x0b\x42\xc4\xbb\x51\x44\x46\x51\x78\x39\x00\x00\x1a\x5a\xe8\x44\x73\x5e\xfb\x29\xcc\x3e\xae\x13\x2d\xdd\xa1\x4e\x2f\x5b\x38\x6b\x24\x19\x73\x21\x9e\x7f\x8b\x87\x9f\xed\xdb\xec\xce\xa1\x18\x1f\x61\x97\x04\x2f\x40\xc5\xad\x7c\x3b\x84\xde\xd2\x5d\x3e\x04\xc1\xbc\x47\x2f\x63\x49\xec\x37\x62\xe3\x92\x49\x3e\x39\x08\x5e\xc3\x2d\x41\x48\x16\x53\xc8\xeb\xa9\x9a\xab\x48\xff\x29\x34\x95\x7e\x53\xfb\x37\x6e\x7f\x07\x00\x00\xff\xff\xdd\x6d\x74\xdb\x2c\x01\x00\x00")

func typeRequirementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRequirementGraphql,
		"type/requirement.graphql",
	)
}

func typeRequirementGraphql() (*asset, error) {
	bytes, err := typeRequirementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/requirement.graphql", size: 300, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeScholarshipGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\x83\x30\x0c\xbd\xf3\x15\xf9\x8e\xdc\x2a\x75\x93\x7a\xe6\x38\xf5\xe0\x26\x1e\xb5\x04\x4e\x66\x3b\xda\xaa\xa9\xff\x3e\x41\x98\x08\xad\x7a\xc2\x7e\xef\xf9\xf1\x30\xb6\x5b\x46\xa7\xe1\x9a\x46\x10\xbd\x52\x76\xbf\x9d\x73\xce\x51\xf4\xee\xc4\xb6\xd4\x9a\x13\x6b\x92\xd3\x33\xe4\x5d\x51\x94\x05\x61\x98\xd0\xbb\xde\x84\x78\x58\x00\x98\x52\x61\x6b\x46\x0c\xac\xe8\xd6\x1b\xfe\x58\xbf\x62\xcd\x18\x4d\x30\xa0\xaf\x8f\xea\xf3\x0d\x12\x11\xb7\xc1\x50\x44\x90\xed\x90\xf3\x48\x01\xda\x57\x40\x85\x8c\x12\xf7\x06\x62\xfb\x3c\x1b\xf9\xc6\x71\x4f\x31\xa7\xc2\x01\x27\x64\x3b\x82\xed\xbf\x03\x47\x1a\xe8\x42\x23\xd9\xed\x88\x1a\x84\xf2\x6c\xb1\x93\x68\xb9\x28\xc5\x97\xb4\xe0\x57\x21\xa9\xee\x9b\x44\xbd\xfb\xa8\xa2\xf3\xa2\xfa\x2c\x1c\x89\x87\xe7\xe0\x2b\xf1\x18\xba\x71\x9d\xad\x9a\xb6\xfa\x65\xb8\xcd\x8d\xff\x2f\xea\xee\x04\xc1\x30\x1e\x5e\xae\xa6\x6f\xfe\xd2\xbd\xeb\x1e\xaf\xe3\x1d\x31\xae\x17\x12\x8a\x2c\x17\xd0\xee\x61\x13\xce\x91\x9a\xf6\xdc\xdd\xff\x02\x00\x00\xff\xff\x57\x6f\xe0\xd8\x69\x02\x00\x00")

func typeScholarshipGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeScholarshipGraphql,
		"type/scholarship.graphql",
	)
}

func typeScholarshipGraphql() (*asset, error) {
	bytes, err := typeScholarshipGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/scholarship.graphql", size: 617, mode: os.FileMode(420), modTime: time.Unix(1649756844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSchoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x4e\xce\xc8\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x20\xe5\x28\x02\x89\x29\x29\x45\xa9\xc5\xc5\x28\x62\xc5\x25\x89\x25\xa5\xc5\x10\x53\x6a\xb9\xb8\x90\xac\x70\x4b\x4d\x4d\x81\x5a\x93\x5c\x5a\x54\x9c\x5f\x84\xaa\x0f\xac\xa6\xd8\x4a\x21\x1a\xc2\x8a\xe5\xaa\x05\x04\x00\x00\xff\xff\x08\xdd\xa9\x2c\x9f\x00\x00\x00")

func typeSchoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSchoolGraphql,
		"type/school.graphql",
	)
}

func typeSchoolGraphql() (*asset, error) {
	bytes, err := typeSchoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/school.graphql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1645609664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSponsorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2e\xc8\xcf\x2b\xce\x2f\x72\x4b\x4d\x4d\x51\xa8\xe6\x52\x50\x50\x50\x48\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x41\x15\x15\x5b\x29\x44\x97\x16\xa7\x16\xc5\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x41\x88\xd4\x71\x3d\x00\x00\x00")

func typeSponsorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSponsorGraphql,
		"type/sponsor.graphql",
	)
}

func typeSponsorGraphql() (*asset, error) {
	bytes, err := typeSponsorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/sponsor.graphql", size: 61, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeStudentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xb1\xca\x02\x41\x0c\x04\xe0\x7e\x9f\x22\xcf\x71\xdd\xcf\x2f\x8a\x9d\x60\x29\x16\xf1\x32\xe8\xc2\xde\xee\x91\xe4\x0a\x91\x7b\x77\xe1\x58\xd0\x60\x37\x7c\x4c\x86\xf8\x73\x06\x99\x2f\x82\xea\x7b\x40\xe8\x95\x88\x88\xc6\x45\xad\xe9\x40\x67\xd7\x5c\xef\x1b\xf5\x92\x0d\x74\xe9\xf1\x9a\xd6\x94\xbe\x07\xfa\x71\x96\x81\x8e\xd5\xb7\x5c\x79\x42\x98\xc1\xc4\xb9\x04\x99\x9b\x39\x97\xff\x26\xb1\xc8\x22\x0a\xb3\x60\xb7\xac\xfe\xd8\xb1\xe3\x57\x4f\x85\xc7\xc8\xa3\x82\x1d\xf2\xe7\x51\x59\x01\x3d\x34\xfe\x3c\xb1\xa6\x77\x00\x00\x00\xff\xff\x90\xb8\xcb\xba\x06\x01\x00\x00")

func typeStudentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeStudentGraphql,
		"type/student.graphql",
	)
}

func typeStudentGraphql() (*asset, error) {
	bytes, err := typeStudentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/student.graphql", size: 262, mode: os.FileMode(420), modTime: time.Unix(1649583954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xb1\x8e\xdb\x30\x0c\xdd\xfd\x15\xba\xdf\xd0\x76\xb8\xb4\x45\x86\x1e\x8a\x5e\x3b\x15\x19\x58\x8b\x75\xd4\x93\x49\x43\xa2\x07\xa3\xc8\xbf\x17\xa2\x94\xd8\x56\x0e\x59\x2c\xf1\xf1\x51\x7a\x14\x5f\x22\xcb\x84\x66\x4e\x18\xcd\xbf\xce\x18\x63\xbc\xb3\xe6\x48\xa2\x7b\x82\x11\xad\x79\x93\xe8\x69\x50\x20\x93\xad\xb2\x7f\x2c\x13\x2a\x84\x23\xf8\xb0\x23\x4d\x67\x26\x7c\xe5\x16\x13\xb6\xc6\x8f\x30\x94\xb2\x9e\xc7\x09\x68\x79\x6d\x6f\x48\x02\x32\xa7\x55\x42\xcf\x33\x49\x5c\x8e\xee\x0e\xb2\xd7\x4d\xb9\x80\x93\x40\x78\x61\xb7\x3f\x0e\x9c\x8b\x98\xd2\x0e\x1b\x90\x1c\x46\x5b\x57\x85\x7e\xfb\x28\xe7\x03\xc8\xbe\x58\xd1\x6f\x01\xfa\x3d\x8c\x72\x26\xdf\x6f\x15\x15\xc4\x9a\x4f\xba\x16\x91\x10\xdd\xd1\x21\x89\x17\x8f\xc9\x9a\x5f\x1b\x60\x39\x95\xe3\x81\xde\xb7\xa7\xe4\xd8\xea\xf7\x16\x3e\xf7\xda\x63\xf3\x98\xdb\x4c\xfb\x7e\x7d\x44\x10\x74\xcf\xb2\x47\x21\x22\xc6\x2f\x0c\xfb\x49\xe5\x41\xbe\xf5\x67\xe6\x90\x15\xae\xd1\xe9\x96\x3d\x70\x3f\x8f\x48\x72\xcd\x5f\xe3\x53\x77\xe9\x3a\xb5\x4e\xe0\xc1\xd3\x77\x4c\x13\x53\xc2\xea\x21\xe1\x77\xa4\xbb\x9b\x8a\x71\x72\x21\xd2\x3c\xde\x5c\x54\x6b\xf4\x00\x8e\xd5\x04\x73\x7e\xa9\x3a\xc1\xd1\xd3\xad\xa8\xcc\xac\x96\x8c\x10\x8a\x99\xfe\xa0\x6e\x2f\x5d\xe7\x69\x9a\xc5\xe8\xf7\x67\xc2\xf8\x52\x1c\x92\x1b\xdf\xdb\xfb\xe9\x03\x72\xe9\xfd\x2a\x47\x03\x5b\xb2\x25\xb3\x72\x9e\x94\xe2\x70\x88\x88\x95\x72\xd0\x60\xa5\x54\x81\x7f\x39\x56\xc2\xd7\xbc\x6f\xf2\x48\x91\x43\xc8\xef\x79\xe7\xbd\x21\x82\x9b\x41\x3c\xd3\x36\x55\x2e\x1e\x26\xb0\xe6\x73\x60\x90\xa6\x8b\x56\xe7\xe3\x9e\x1b\x45\x8f\xc9\x6d\x7f\x1f\xb0\x37\x03\xda\xcc\xf5\xf1\x90\xca\x2f\xa6\xf9\xeb\xb9\xfc\x0f\x00\x00\xff\xff\x2d\x2d\x1b\x68\x94\x04\x00\x00")

func typeUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGraphql,
		"type/user.graphql",
	)
}

func typeUserGraphql() (*asset, error) {
	bytes, err := typeUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.graphql", size: 1172, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUser_documentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2d\x4e\x2d\x72\xc9\x4f\x2e\xcd\x4d\xcd\x2b\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\x41\xd2\x9e\x48\xfc\x14\xa8\x52\x2b\x85\xcc\xdc\xc4\xf4\x54\xae\x5a\x40\x00\x00\x00\xff\xff\x4c\x8a\xd9\xa7\x45\x00\x00\x00")

func typeUser_documentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUser_documentGraphql,
		"type/user_document.graphql",
	)
}

func typeUser_documentGraphql() (*asset, error) {
	bytes, err := typeUser_documentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user_document.graphql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUser_schoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8a\x31\x0e\xc2\x40\x0c\x04\xfb\xbc\x62\x1f\xc0\x0b\x5c\x23\xa4\xd4\x79\x81\xc5\x59\xc7\xa1\x8b\x1d\x39\x4e\x81\x10\x7f\x47\xc4\x29\x28\x52\x8d\x76\x66\xe3\xb5\x08\xb6\x55\x7c\xba\x3f\xcc\x3a\xde\x03\x00\xb4\x42\x18\x35\x2e\xfb\xf8\xd5\xf1\x5f\xac\xfb\x95\x0e\xa6\x2b\x52\x5d\x84\x0e\xa6\x9b\xf9\x69\x4e\x89\x34\xa2\x6e\xbd\xcf\xa2\x71\xe5\x10\xc2\x14\xde\xb4\x66\xab\xce\x65\xe3\x68\xa6\x27\x6d\x61\xc2\xad\x1b\xc7\xf0\xf9\x06\x00\x00\xff\xff\x46\x48\x4d\x37\xb2\x00\x00\x00")

func typeUser_schoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUser_schoolGraphql,
		"type/user_school.graphql",
	)
}

func typeUser_schoolGraphql() (*asset, error) {
	bytes, err := typeUser_schoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user_school.graphql", size: 178, mode: os.FileMode(420), modTime: time.Unix(1648709991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql":           mutationGraphql,
	"query.graphql":              queryGraphql,
	"schema.graphql":             schemaGraphql,
	"type/applicant.graphql":     typeApplicantGraphql,
	"type/assessment.graphql":    typeAssessmentGraphql,
	"type/bank.graphql":          typeBankGraphql,
	"type/bank_transfer.graphql": typeBank_transferGraphql,
	"type/card_identity.graphql": typeCard_identityGraphql,
	"type/country.graphql":       typeCountryGraphql,
	"type/degree.graphql":        typeDegreeGraphql,
	"type/ethnic.graphql":        typeEthnicGraphql,
	"type/image.graphql":         typeImageGraphql,
	"type/major.graphql":         typeMajorGraphql,
	"type/payment.graphql":       typePaymentGraphql,
	"type/requirement.graphql":   typeRequirementGraphql,
	"type/scholarship.graphql":   typeScholarshipGraphql,
	"type/school.graphql":        typeSchoolGraphql,
	"type/sponsor.graphql":       typeSponsorGraphql,
	"type/student.graphql":       typeStudentGraphql,
	"type/user.graphql":          typeUserGraphql,
	"type/user_document.graphql": typeUser_documentGraphql,
	"type/user_school.graphql":   typeUser_schoolGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql":    &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql":   &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"applicant.graphql":     &bintree{typeApplicantGraphql, map[string]*bintree{}},
		"assessment.graphql":    &bintree{typeAssessmentGraphql, map[string]*bintree{}},
		"bank.graphql":          &bintree{typeBankGraphql, map[string]*bintree{}},
		"bank_transfer.graphql": &bintree{typeBank_transferGraphql, map[string]*bintree{}},
		"card_identity.graphql": &bintree{typeCard_identityGraphql, map[string]*bintree{}},
		"country.graphql":       &bintree{typeCountryGraphql, map[string]*bintree{}},
		"degree.graphql":        &bintree{typeDegreeGraphql, map[string]*bintree{}},
		"ethnic.graphql":        &bintree{typeEthnicGraphql, map[string]*bintree{}},
		"image.graphql":         &bintree{typeImageGraphql, map[string]*bintree{}},
		"major.graphql":         &bintree{typeMajorGraphql, map[string]*bintree{}},
		"payment.graphql":       &bintree{typePaymentGraphql, map[string]*bintree{}},
		"requirement.graphql":   &bintree{typeRequirementGraphql, map[string]*bintree{}},
		"scholarship.graphql":   &bintree{typeScholarshipGraphql, map[string]*bintree{}},
		"school.graphql":        &bintree{typeSchoolGraphql, map[string]*bintree{}},
		"sponsor.graphql":       &bintree{typeSponsorGraphql, map[string]*bintree{}},
		"student.graphql":       &bintree{typeStudentGraphql, map[string]*bintree{}},
		"user.graphql":          &bintree{typeUserGraphql, map[string]*bintree{}},
		"user_document.graphql": &bintree{typeUser_documentGraphql, map[string]*bintree{}},
		"user_school.graphql":   &bintree{typeUser_schoolGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
