// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// mutation.graphql
// query.graphql
// schema.graphql
// type/bank.graphql
// type/bank_transfer.graphql
// type/card_identity.graphql
// type/country.graphql
// type/degree.graphql
// type/ethnic.graphql
// type/image.graphql
// type/major.graphql
// type/payment.graphql
// type/requirement.graphql
// type/scholarship.graphql
// type/school.graphql
// type/sponsor.graphql
// type/user.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xf7\x2b\xd4\x5b\xfb\x0b\xbe\x05\x49\x30\x04\xd8\x8a\x22\x69\x0e\xc3\xd0\x03\x63\xb1\x8e\x50\x9b\xd2\x44\x6a\x85\x31\xec\xdf\x07\xd9\xae\xe5\xd8\x5a\x82\xe5\x12\x98\x7c\xd2\x93\xde\x7b\xa2\xb4\x0e\xd5\xb7\x20\x20\xc6\x92\xfa\x7d\xa7\x94\x52\x7b\xac\x0c\x0b\xfa\x23\xa3\x7f\xe8\x2a\xf1\x17\x91\x85\x0a\x8c\xfe\xa5\x75\x78\x3f\xd6\xb1\x01\x53\x17\xea\x20\xde\x50\x95\xca\xee\x6c\x09\x9f\x6c\xa6\x01\xcc\x1f\xd6\xeb\xcb\xce\x63\xbf\xf5\x5d\xf7\x71\x74\x1a\x04\x2f\xe9\x8d\x2e\xd4\x8e\x24\xed\x43\xd0\x60\x96\x56\x6c\xa1\x0c\xb9\x20\xbb\x06\x2a\x1c\x3b\xa5\x6d\x1c\x50\xfb\x34\x59\x36\xe9\x05\x12\xdf\xee\xe6\x1c\xa0\xb5\x47\xe6\x0c\x8d\x65\x81\x7a\x6d\x75\xe6\x08\x25\x78\xbd\xd3\x48\x62\xc4\x20\x17\xea\x47\x77\x98\x75\xaa\xb6\xf7\xaf\x09\x7d\x02\x7a\x5f\xf0\xc6\xe2\xaa\xec\x4e\x95\x93\x70\xda\xce\xaa\x80\x72\x26\x53\x0e\x32\x6c\xbb\x8f\xb1\x57\x21\x69\xf4\xc5\xf0\x1f\xbd\x5c\x1a\xb0\x2a\xc5\xfc\x5a\x58\x20\xf6\x1d\xe9\x8a\x6d\x7b\x64\x94\xe7\xc1\xde\x87\xff\x31\x7c\xed\x11\x04\x0f\xe5\xd9\xd6\xe0\xf9\x6c\x5c\x5a\xcd\xce\x12\x5b\xbf\x90\x28\x6f\x3f\x34\x51\x94\x19\xd4\xc4\x1c\x64\x33\x01\x1f\xe0\x35\xe2\xdc\x75\xe7\x6a\x53\x76\x2f\xe2\x20\xe0\x25\x43\x93\x10\x5b\xd2\x99\x3e\x91\x0d\x54\x62\x83\x24\x1b\x90\x9c\x43\xb5\xa9\xcc\xc9\xd4\x46\xda\x0d\x72\xe9\x8d\x8b\x9b\x2d\x71\x1c\x4e\x6c\xf4\x75\x8c\xc7\x9f\xc1\xf8\x9e\x2c\xe1\x62\xf2\x06\xe4\x24\x6e\x6f\x81\xb4\xa1\xea\x1f\xf7\x1a\xba\xd9\x3b\x4d\x58\xc6\x50\xef\x53\xed\x93\xe4\xb1\x50\x9c\x7c\xec\xed\x3d\x84\x53\x63\xe4\xc5\x03\xf1\x1b\xfa\x67\x68\xe3\x82\x89\xc5\x09\xbf\xb0\x59\x86\x45\x79\x15\x6f\x3e\x84\x1b\x0f\x69\x91\x8c\xcf\x3b\xb8\xfe\x8c\xf3\x74\xda\xfa\xe1\x46\x00\xfb\x29\xb9\xc8\x43\x6e\x8e\x0c\x4a\xd9\x7a\x10\x09\x25\xb8\xad\x0e\x7d\xac\x12\x4f\x7c\x25\x0b\x59\x2a\x70\xdf\x11\xfc\x1e\x81\x53\x22\xa6\x13\x08\xd1\x7f\xb1\x90\x99\xcb\x2c\x41\xb7\xeb\x7e\xde\xf5\x88\xee\xf6\xf1\xa5\x4f\xaa\x33\xfc\x06\x59\x0c\x41\x3e\x7e\xf1\x80\xbd\x38\x63\x2e\x8e\x63\x69\x9a\xbd\x08\xdc\xd8\x32\x5c\x44\xa8\x97\xfd\x35\x33\x14\x56\xce\xd5\x6d\x76\x26\x64\x25\xb9\x96\x22\x64\x86\x76\x21\x93\xc7\xd2\x36\x0d\x92\xee\x2e\xf6\x15\x45\xe2\x5c\x9c\x8d\x89\xc7\x71\xd9\x9f\xbf\x01\x00\x00\xff\xff\x57\xda\x38\x9c\x2c\x07\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 1836, mode: os.FileMode(420), modTime: time.Unix(1647267060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xc1\x4e\xc3\x30\x0c\x86\xef\x7b\x0a\xef\xc6\x5e\x21\xc7\xb1\x0d\x55\x02\x09\x36\x89\xcb\xb4\x43\x48\x4d\x1b\x96\xc6\x95\xe3\x0a\x55\x88\x77\x47\x59\xa0\xd9\xa6\x69\x02\xd4\x9c\x52\x47\xfe\xbf\x3f\x7f\x1d\xe9\x5b\x84\xa7\x0e\xb9\x87\x8f\x09\x00\xc0\x0a\xc5\xd4\x73\xed\xf7\x37\x87\xcf\xb8\x9c\x6d\xac\x28\x28\xbc\x0c\x25\xd3\x71\x20\x56\xb0\x11\xb6\xbe\x1a\xca\x5e\x37\x78\x52\x9c\x29\x78\xd1\x7e\xbf\x42\x2c\x27\x59\xfe\x96\x3a\x2f\xdc\x8f\x45\x30\x49\x2e\x43\xee\xa9\xb2\x3e\xab\x63\xa3\xad\xfb\x69\x9a\x0e\xe5\x56\x87\xf0\x4e\x5c\x9e\x9e\xcc\x14\xb8\xd8\xbe\xc6\xd0\x92\x0f\x98\x14\xd7\x18\xd0\x97\xcb\x28\xf4\x8c\x6c\x5f\xad\xd1\x62\xe9\x3a\x63\x36\xf8\x4c\x37\x27\xae\x48\x1e\xbf\xa1\x7f\xea\x8c\x99\x6d\x4c\x4d\x4e\x73\xa8\x6d\x9b\x7b\x0f\x16\x89\x8b\xf2\x57\xd9\x5d\x48\x39\x88\x96\x2e\x28\xd8\x16\x5e\x76\x57\x43\x0e\x99\x9f\x83\xbe\x43\x39\xf2\x35\xef\x8b\x45\xf6\x66\x93\xa9\xe9\x05\x81\xa3\x6b\x2d\xb0\x62\x44\x05\xdb\xf2\xb0\xd9\x1d\x1d\x3d\xe8\x37\xe2\xb1\x66\xa4\x89\x62\x67\x63\x18\xad\x93\x1b\x85\x10\x57\x7c\x4a\x97\x52\x23\x77\xce\x4d\x7f\xed\x3f\xe0\x93\x61\x19\x20\x49\xef\x8c\xb2\x94\xda\x5b\xa3\x60\x9b\x36\xbb\xc9\xe7\x57\x00\x00\x00\xff\xff\x5e\x1a\x0a\x50\xec\x03\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1004, mode: os.FileMode(420), modTime: time.Unix(1647276824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBankGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\xc9\xf9\x29\x08\x81\x5a\x2e\x2e\xb8\x66\xb7\xd4\xd4\x14\xa8\x01\xc9\xa5\x45\xc5\xf9\x45\x28\xda\x40\x2a\x8a\xad\x14\xa2\x41\x74\x2c\x57\x2d\x20\x00\x00\xff\xff\x55\x04\xf7\xe5\x73\x00\x00\x00")

func typeBankGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBankGraphql,
		"type/bank.graphql",
	)
}

func typeBankGraphql() (*asset, error) {
	bytes, err := typeBankGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank.graphql", size: 115, mode: os.FileMode(420), modTime: time.Unix(1641850924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeBank_transferGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x4a\xcc\xcb\x0e\x29\x4a\xcc\x2b\x4e\x4b\x2d\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x24\x26\x27\xe7\x97\xe6\x95\xf8\xe1\x12\xcf\xb7\x52\xf0\xcc\x2b\x01\x0b\x65\xe6\x26\xa6\xa7\x5a\x41\x28\xae\x5a\x40\x00\x00\x00\xff\xff\x01\x6f\xbd\xff\x62\x00\x00\x00")

func typeBank_transferGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeBank_transferGraphql,
		"type/bank_transfer.graphql",
	)
}

func typeBank_transferGraphql() (*asset, error) {
	bytes, err := typeBank_transferGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/bank_transfer.graphql", size: 98, mode: os.FileMode(420), modTime: time.Unix(1645108896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCard_identityGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x03\x21\x0c\x05\xd0\xbd\xa7\xf8\x5e\xc3\x6d\x57\xae\xdb\x0b\x0c\x35\x0c\xa1\x4c\x1a\x6c\xa4\x48\x99\xbb\x17\x75\x16\x9d\xba\xd1\xf8\x91\xf7\x63\x55\x09\xf7\x25\xa7\x98\x48\x8c\xad\xe2\xe3\x00\x80\x53\x40\x14\xeb\x73\xfb\x13\x70\xb5\xcc\xb2\xf6\x40\x9e\xa7\x27\x6f\xcb\x4a\x61\x5c\x3d\x28\x2f\xca\xf1\x00\x76\xe7\x58\xb4\x18\xfa\x79\x99\x9b\x86\xfe\xbb\xc2\xad\x2a\xf9\xbf\x22\x7f\x6a\x6a\x54\x6c\xb3\x6f\x3e\x49\xd9\x26\xe0\xd0\x1f\xa6\x43\xd2\xb7\xba\xfd\x1b\x00\x00\xff\xff\xef\x69\xfb\x48\xee\x00\x00\x00")

func typeCard_identityGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCard_identityGraphql,
		"type/card_identity.graphql",
	)
}

func typeCard_identityGraphql() (*asset, error) {
	bytes, err := typeCard_identityGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/card_identity.graphql", size: 238, mode: os.FileMode(420), modTime: time.Unix(1642350756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeCountryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\xce\x2f\xcd\x2b\x29\xaa\x54\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x90\x95\xbb\xa5\xa6\xa6\x40\xb5\x24\x97\x16\x15\xe7\x17\xc1\x15\x82\x85\xc0\x8a\x32\x53\x8b\xad\x14\xa2\xa1\x1a\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xb5\xa0\xc5\x2d\x6f\x00\x00\x00")

func typeCountryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCountryGraphql,
		"type/country.graphql",
	)
}

func typeCountryGraphql() (*asset, error) {
	bytes, err := typeCountryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/country.graphql", size: 111, mode: os.FileMode(420), modTime: time.Unix(1641984426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeDegreeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x48\x49\x4d\x2f\x4a\x4d\x55\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x0e\xf6\x29\x1d\x2c\x00\x00\x00")

func typeDegreeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDegreeGraphql,
		"type/degree.graphql",
	)
}

func typeDegreeGraphql() (*asset, error) {
	bytes, err := typeDegreeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/degree.graphql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1645633111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeEthnicGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2d\xc9\xc8\xcb\x4c\x56\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\x01\x01\x00\x00\xff\xff\x53\xf6\x00\xd4\x2c\x00\x00\x00")

func typeEthnicGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeEthnicGraphql,
		"type/ethnic.graphql",
	)
}

func typeEthnicGraphql() (*asset, error) {
	bytes, err := typeEthnicGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/ethnic.graphql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1647274783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeImageGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\xcc\x4d\x4c\x4f\x55\xa8\xe6\x52\x50\x50\x50\x28\x2d\xca\xb1\x52\x08\x2e\x29\xca\xcc\x4b\x07\xf3\xcb\x33\x53\x4a\x32\xac\x14\x3c\xf3\x4a\xc0\xdc\x8c\xd4\xcc\xf4\x8c\x12\x04\x3f\x37\x33\x37\x15\x45\x7d\x72\x62\x41\x49\x66\x7e\x1e\x5c\xac\x96\x8b\x2b\x33\xaf\xa0\xb4\x44\x01\x4c\x7a\x62\xb7\x49\x11\xcd\x2a\x45\x74\xbb\x14\x89\xb4\x0c\x10\x00\x00\xff\xff\x5b\xe8\x7b\x35\xcf\x00\x00\x00")

func typeImageGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImageGraphql,
		"type/image.graphql",
	)
}

func typeImageGraphql() (*asset, error) {
	bytes, err := typeImageGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/image.graphql", size: 207, mode: os.FileMode(420), modTime: time.Unix(1641981243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeMajorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xc8\x4d\xcc\xca\x2f\x52\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xb9\x6a\xb9\xb8\x10\x8a\xdd\x52\x53\x53\xa0\x1a\x92\x4b\x8b\x8a\xf3\x8b\xe0\xca\x40\x42\x60\x25\xc5\x56\x0a\xd1\x60\x46\x2c\x57\x2d\x20\x00\x00\xff\xff\xad\x54\xf4\xa3\x66\x00\x00\x00")

func typeMajorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMajorGraphql,
		"type/major.graphql",
	)
}

func typeMajorGraphql() (*asset, error) {
	bytes, err := typeMajorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/major.graphql", size: 102, mode: os.FileMode(420), modTime: time.Unix(1645266495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePaymentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\xbd\xa7\xf0\x39\xb2\x21\xb1\x74\x61\x81\x0b\x7c\x12\xd3\x5a\x34\x4e\x94\x98\x21\x42\xdc\x1d\x11\x18\xc8\xd0\xc9\xf6\x7f\xfe\xd6\x32\x53\x46\x8b\xac\x46\xcf\x89\x88\x48\x82\xa3\x59\xad\xef\xd5\xaf\x69\x43\xa9\xab\xe4\xf9\x2f\xbe\x42\xef\x97\x02\xad\x37\x2e\x6e\xb8\x3a\x07\x46\xd8\x44\xd9\xd1\xd9\x8a\xe8\xd2\x43\xfb\x7d\x1c\x61\x23\x7c\xea\x07\xef\xd3\x43\xed\x84\xb8\x6f\x69\x10\x89\x58\xd8\x7d\xc7\xf4\x7a\x07\x00\x00\xff\xff\x71\x28\x90\x61\xc7\x00\x00\x00")

func typePaymentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePaymentGraphql,
		"type/payment.graphql",
	)
}

func typePaymentGraphql() (*asset, error) {
	bytes, err := typePaymentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/payment.graphql", size: 199, mode: os.FileMode(420), modTime: time.Unix(1645350005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeRequirementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\xae\xc3\x20\x0c\x44\xf7\x9c\x62\xb8\x46\x6e\x90\xed\xff\xbd\x00\x4a\xac\xc6\x52\x70\x28\xb1\xab\x56\x55\xee\x5e\x01\x8b\xa6\x65\x83\xd0\xb3\x3d\x6f\xf4\x99\x08\x99\x6e\xc6\x99\x22\x89\xe2\xe5\x00\x80\xe7\x01\xa3\x68\xfd\xef\xd3\xb2\xad\x21\xef\x0b\xa7\xf1\x84\xcb\xe5\x80\x7f\xcd\x2c\xd7\x0a\x24\xc4\x6f\x70\x0f\xab\x7d\xc8\xe1\x1c\x89\xc5\xb3\xec\x52\xe4\x4d\xa8\xf4\x68\xb1\xf3\x36\x59\x99\x95\x7d\x96\x64\x8a\xfa\xfe\x75\x15\x9b\xff\x27\xcd\x77\x4d\x7c\x5f\xc5\xbb\xe3\x1d\x00\x00\xff\xff\x0f\x56\xcf\x3b\xf7\x00\x00\x00")

func typeRequirementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRequirementGraphql,
		"type/requirement.graphql",
	)
}

func typeRequirementGraphql() (*asset, error) {
	bytes, err := typeRequirementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/requirement.graphql", size: 247, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeScholarshipGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xcd\x6a\xc3\x30\x0c\xbe\xe7\x29\xfc\x1c\xbe\x15\xba\x41\xcf\x3d\x8e\x1e\x54\x5b\x4b\x05\x89\xec\x49\x32\x23\x8c\xbe\xfb\x48\xdc\x61\xa7\x65\xa7\xe8\xfb\xd1\x27\xc5\xb2\x25\xa3\xd3\x70\x4b\x13\x88\xde\x28\xbb\x9f\xc1\x39\xe7\x28\x7a\x77\x62\xdb\x6a\xcd\x89\x35\xc9\xe9\x95\xf2\xae\x28\xca\xc6\x30\xcc\xe8\xdd\xd9\x84\x78\xdc\x08\x98\x53\x61\xeb\x5a\x0c\xac\x68\xc3\x34\xc3\x88\xbe\x7e\x6a\xc3\x37\x48\x44\x6c\x8e\x50\x44\x90\xed\x90\xf3\x44\x01\xfa\x2c\xa8\x94\x51\xe2\xb3\x81\xd8\x7e\x70\x13\xdf\x38\xee\x25\xe6\x54\x38\xe0\x8c\x6c\x47\xb0\xfd\xc2\x38\xd1\x48\x57\x9a\xc8\x96\x23\x6a\x10\xca\x6b\xc4\xce\xa2\xe5\xaa\x14\xff\x95\x05\xbf\x0a\x49\x4d\x6f\x16\xf5\xee\xa3\x9a\x2e\x9b\xeb\xb3\x70\x24\x1e\x5f\x17\x7f\x08\xcf\x4b\x77\xa9\x6b\x54\x07\x6b\x5e\x86\x65\x05\xfe\xaf\xa8\x6f\x27\x08\x86\xf1\xd0\x26\xdc\x87\xe1\xf9\xd6\xef\x88\xf1\x71\xef\x50\x64\xbb\x67\xff\xb3\xcd\xb8\xce\xed\xe0\x65\xb8\xff\x06\x00\x00\xff\xff\x5d\x3f\x48\x05\x37\x02\x00\x00")

func typeScholarshipGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeScholarshipGraphql,
		"type/scholarship.graphql",
	)
}

func typeScholarshipGraphql() (*asset, error) {
	bytes, err := typeScholarshipGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/scholarship.graphql", size: 567, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSchoolGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x4e\xce\xc8\xcf\xcf\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x01\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\xc1\x02\x20\xe5\x28\x02\x89\x29\x29\x45\xa9\xc5\xc5\x28\x62\xc5\x25\x89\x25\xa5\xc5\x10\x53\x6a\xb9\xb8\x90\xac\x70\x4b\x4d\x4d\x81\x5a\x93\x5c\x5a\x54\x9c\x5f\x84\xaa\x0f\xac\xa6\xd8\x4a\x21\x1a\xc2\x8a\xe5\xaa\x05\x04\x00\x00\xff\xff\x08\xdd\xa9\x2c\x9f\x00\x00\x00")

func typeSchoolGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSchoolGraphql,
		"type/school.graphql",
	)
}

func typeSchoolGraphql() (*asset, error) {
	bytes, err := typeSchoolGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/school.graphql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1645609664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeSponsorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x28\x2e\xc8\xcf\x2b\xce\x2f\x72\x4b\x4d\x4d\x51\xa8\xe6\x52\x50\x50\x50\x48\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\x07\x0b\x41\x15\x15\x5b\x29\x44\x97\x16\xa7\x16\xc5\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x41\x88\xd4\x71\x3d\x00\x00\x00")

func typeSponsorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSponsorGraphql,
		"type/sponsor.graphql",
	)
}

func typeSponsorGraphql() (*asset, error) {
	bytes, err := typeSponsorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/sponsor.graphql", size: 61, mode: os.FileMode(420), modTime: time.Unix(1647255114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xb1\xae\x1b\x21\x10\xec\xef\x2b\xf0\x6f\xd0\x59\x76\x12\xb9\x88\x8b\x38\xa9\xa2\x14\x9b\x63\x73\x26\x86\x5d\x04\x7b\xc5\x29\xf2\xbf\x47\x07\x3c\x9b\x43\x96\x1b\x1f\xcc\xce\xc0\xec\x0e\x96\x25\xa0\x9a\x13\x46\xf5\x6f\x50\x4a\x29\x6b\xb4\x3a\x91\xe4\x35\x81\x47\xad\x2e\x12\x2d\x4d\x19\x58\xc9\x3a\xb3\xbf\x2f\x01\x33\x84\x1e\xac\xdb\x90\xc2\x95\x09\xcf\xdc\x63\xc2\x5a\x59\x0f\x53\x91\x8d\xec\x03\xd0\x72\xee\x6f\x48\x02\x32\xa7\xa7\x85\x91\x67\x92\xb8\x9c\x1a\x57\x81\x93\x80\x3b\xb0\xd9\x2a\xc1\x98\x88\x29\x6d\xb0\x09\xc9\x60\xd4\xf5\x5b\xfc\xca\x95\xec\xd8\x9e\x57\x10\xad\x3e\xe5\x6f\xb9\x15\xa2\x39\x19\x24\xb1\x62\x31\x69\xf5\xb3\x01\x96\x5f\x99\xf2\x1b\xe8\xd6\x9e\xb2\xee\xf7\x63\xb6\xdb\xf5\xde\x56\xfa\x76\xc7\x88\x20\x68\xf6\xf2\x40\xef\xc3\x90\x23\x71\x3c\x59\xfa\x86\x29\x30\x25\xac\xd9\x08\xdf\x90\x36\xfa\x35\x8a\x12\xc8\x2a\x44\x9a\xfd\x23\x9d\xaa\xc9\x07\x70\xac\xc3\x9d\xd7\x1e\xea\xb8\xbc\xa5\x87\xa8\x0c\xa8\x4a\x3c\xb8\x12\xd2\x1f\xcc\xcb\xfb\x30\x58\x0a\xb3\xa8\xfc\xfb\x23\x61\x3c\x94\x54\xbe\x30\xb8\xed\xb3\xd9\xbd\x20\x5f\xc6\x2b\xf3\x07\x2f\xe5\x8d\x2e\xd5\x52\x79\x72\x76\x99\x62\x70\x8a\x88\x95\x72\xcc\x9b\x27\xa5\x1a\xfc\xcb\xb1\x12\xbe\xae\xeb\xae\x8e\x14\xd9\x39\x8f\x24\x47\x90\xed\xc0\xa7\x08\x66\x06\xb1\x4c\x6d\xa9\x5c\x3c\x05\xd0\xea\xb3\x63\x90\xae\x8b\xde\xe7\xfb\x9e\x3b\x47\xef\xc9\x7d\x7f\x2f\xd8\x4d\x40\x4d\xae\xef\x43\x2a\x6f\xb9\xfb\x4b\xdf\xff\x07\x00\x00\xff\xff\x21\x1f\xb8\x2f\xec\x03\x00\x00")

func typeUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGraphql,
		"type/user.graphql",
	)
}

func typeUserGraphql() (*asset, error) {
	bytes, err := typeUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.graphql", size: 1004, mode: os.FileMode(420), modTime: time.Unix(1647275041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql":           mutationGraphql,
	"query.graphql":              queryGraphql,
	"schema.graphql":             schemaGraphql,
	"type/bank.graphql":          typeBankGraphql,
	"type/bank_transfer.graphql": typeBank_transferGraphql,
	"type/card_identity.graphql": typeCard_identityGraphql,
	"type/country.graphql":       typeCountryGraphql,
	"type/degree.graphql":        typeDegreeGraphql,
	"type/ethnic.graphql":        typeEthnicGraphql,
	"type/image.graphql":         typeImageGraphql,
	"type/major.graphql":         typeMajorGraphql,
	"type/payment.graphql":       typePaymentGraphql,
	"type/requirement.graphql":   typeRequirementGraphql,
	"type/scholarship.graphql":   typeScholarshipGraphql,
	"type/school.graphql":        typeSchoolGraphql,
	"type/sponsor.graphql":       typeSponsorGraphql,
	"type/user.graphql":          typeUserGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"query.graphql":    &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql":   &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"bank.graphql":          &bintree{typeBankGraphql, map[string]*bintree{}},
		"bank_transfer.graphql": &bintree{typeBank_transferGraphql, map[string]*bintree{}},
		"card_identity.graphql": &bintree{typeCard_identityGraphql, map[string]*bintree{}},
		"country.graphql":       &bintree{typeCountryGraphql, map[string]*bintree{}},
		"degree.graphql":        &bintree{typeDegreeGraphql, map[string]*bintree{}},
		"ethnic.graphql":        &bintree{typeEthnicGraphql, map[string]*bintree{}},
		"image.graphql":         &bintree{typeImageGraphql, map[string]*bintree{}},
		"major.graphql":         &bintree{typeMajorGraphql, map[string]*bintree{}},
		"payment.graphql":       &bintree{typePaymentGraphql, map[string]*bintree{}},
		"requirement.graphql":   &bintree{typeRequirementGraphql, map[string]*bintree{}},
		"scholarship.graphql":   &bintree{typeScholarshipGraphql, map[string]*bintree{}},
		"school.graphql":        &bintree{typeSchoolGraphql, map[string]*bintree{}},
		"sponsor.graphql":       &bintree{typeSponsorGraphql, map[string]*bintree{}},
		"user.graphql":          &bintree{typeUserGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
