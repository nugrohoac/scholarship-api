// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Nusantara-Muda/scholarship-api/src/business/entity"
	mock "github.com/stretchr/testify/mock"
)

// ApplicantService is an autogenerated mock type for the ApplicantService type
type ApplicantService struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *ApplicantService) Fetch(ctx context.Context, filter entity.FilterApplicant) (entity.ApplicantFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.ApplicantFeed
	if rf, ok := ret.Get(0).(func(context.Context, entity.FilterApplicant) entity.ApplicantFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.ApplicantFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.FilterApplicant) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *ApplicantService) GetByID(ctx context.Context, ID int64) (entity.Applicant, error) {
	ret := _m.Called(ctx, ID)

	var r0 entity.Applicant
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Applicant); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entity.Applicant)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreRating provides a mock function with given fields: ctx, ApplicantID, rating
func (_m *ApplicantService) StoreRating(ctx context.Context, ApplicantID int64, rating int32) (string, error) {
	ret := _m.Called(ctx, ApplicantID, rating)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) string); ok {
		r0 = rf(ctx, ApplicantID, rating)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int32) error); ok {
		r1 = rf(ctx, ApplicantID, rating)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, ID, status
func (_m *ApplicantService) UpdateStatus(ctx context.Context, ID int64, status int32) (string, error) {
	ret := _m.Called(ctx, ID, status)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) string); ok {
		r0 = rf(ctx, ID, status)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int32) error); ok {
		r1 = rf(ctx, ID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
