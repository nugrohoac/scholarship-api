// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Nusantara-Muda/scholarship-api/src/business/entity"
	mock "github.com/stretchr/testify/mock"
)

// EmailRepository is an autogenerated mock type for the EmailRepository type
type EmailRepository struct {
	mock.Mock
}

// BlazingToAwardee provides a mock function with given fields: ctx, mapEmailToken, scholarship
func (_m *EmailRepository) BlazingToAwardee(ctx context.Context, mapEmailToken map[string]string, scholarship entity.Scholarship) error {
	ret := _m.Called(ctx, mapEmailToken, scholarship)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, entity.Scholarship) error); ok {
		r0 = rf(ctx, mapEmailToken, scholarship)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmToSponsor provides a mock function with given fields: ctx, emailSponsor, studentName, scholarshipName
func (_m *EmailRepository) ConfirmToSponsor(ctx context.Context, emailSponsor string, studentName string, scholarshipName string) error {
	ret := _m.Called(ctx, emailSponsor, studentName, scholarshipName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, emailSponsor, studentName, scholarshipName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyFundingConformation provides a mock function with given fields: ctx, email, token, scholarshipID, data
func (_m *EmailRepository) NotifyFundingConformation(ctx context.Context, email string, token string, scholarshipID int64, data string) error {
	ret := _m.Called(ctx, email, token, scholarshipID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, string) error); ok {
		r0 = rf(ctx, email, token, scholarshipID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendActivateUser provides a mock function with given fields: ctx, email, token
func (_m *EmailRepository) SendActivateUser(ctx context.Context, email string, token string) error {
	ret := _m.Called(ctx, email, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendForgotPassword provides a mock function with given fields: ctx, email, token
func (_m *EmailRepository) SendForgotPassword(ctx context.Context, email string, token string) error {
	ret := _m.Called(ctx, email, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
