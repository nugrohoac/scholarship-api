// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	scholarship_api "github.com/Nusantara-Muda/scholarship-api"
	mock "github.com/stretchr/testify/mock"
)

// ScholarshipService is an autogenerated mock type for the ScholarshipService type
type ScholarshipService struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, userID, scholarshipID, documents
func (_m *ScholarshipService) Apply(ctx context.Context, userID int64, scholarshipID int64, documents []scholarship_api.Document) (string, error) {
	ret := _m.Called(ctx, userID, scholarshipID, documents)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, []scholarship_api.Document) string); ok {
		r0 = rf(ctx, userID, scholarshipID, documents)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, []scholarship_api.Document) error); ok {
		r1 = rf(ctx, userID, scholarshipID, documents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, scholarship
func (_m *ScholarshipService) Create(ctx context.Context, scholarship scholarship_api.Scholarship) (scholarship_api.Scholarship, error) {
	ret := _m.Called(ctx, scholarship)

	var r0 scholarship_api.Scholarship
	if rf, ok := ret.Get(0).(func(context.Context, scholarship_api.Scholarship) scholarship_api.Scholarship); ok {
		r0 = rf(ctx, scholarship)
	} else {
		r0 = ret.Get(0).(scholarship_api.Scholarship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, scholarship_api.Scholarship) error); ok {
		r1 = rf(ctx, scholarship)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *ScholarshipService) Fetch(ctx context.Context, filter scholarship_api.ScholarshipFilter) (scholarship_api.ScholarshipFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 scholarship_api.ScholarshipFeed
	if rf, ok := ret.Get(0).(func(context.Context, scholarship_api.ScholarshipFilter) scholarship_api.ScholarshipFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(scholarship_api.ScholarshipFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, scholarship_api.ScholarshipFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *ScholarshipService) GetByID(ctx context.Context, ID int64) (scholarship_api.Scholarship, error) {
	ret := _m.Called(ctx, ID)

	var r0 scholarship_api.Scholarship
	if rf, ok := ret.Get(0).(func(context.Context, int64) scholarship_api.Scholarship); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(scholarship_api.Scholarship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
