// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "github.com/Nusantara-Muda/scholarship-api/src/business/entity"
import mock "github.com/stretchr/testify/mock"

// ScholarshipService is an autogenerated mock type for the ScholarshipService type
type ScholarshipService struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, userID, scholarshipID, essay, recommendationLetter
func (_m *ScholarshipService) Apply(ctx context.Context, userID int64, scholarshipID int64, essay string, recommendationLetter entity.Image) (string, error) {
	ret := _m.Called(ctx, userID, scholarshipID, essay, recommendationLetter)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, entity.Image) string); ok {
		r0 = rf(ctx, userID, scholarshipID, essay, recommendationLetter)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, entity.Image) error); ok {
		r1 = rf(ctx, userID, scholarshipID, essay, recommendationLetter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApprovedScholarship provides a mock function with given fields: ctx, scholarshipID
func (_m *ScholarshipService) ApprovedScholarship(ctx context.Context, scholarshipID int64) (string, error) {
	ret := _m.Called(ctx, scholarshipID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, scholarshipID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, scholarshipID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, scholarship
func (_m *ScholarshipService) Create(ctx context.Context, scholarship entity.Scholarship) (entity.Scholarship, error) {
	ret := _m.Called(ctx, scholarship)

	var r0 entity.Scholarship
	if rf, ok := ret.Get(0).(func(context.Context, entity.Scholarship) entity.Scholarship); ok {
		r0 = rf(ctx, scholarship)
	} else {
		r0 = ret.Get(0).(entity.Scholarship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Scholarship) error); ok {
		r1 = rf(ctx, scholarship)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *ScholarshipService) Fetch(ctx context.Context, filter entity.ScholarshipFilter) (entity.ScholarshipFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.ScholarshipFeed
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScholarshipFilter) entity.ScholarshipFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.ScholarshipFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.ScholarshipFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchScholarshipBackoffice provides a mock function with given fields: ctx, filter
func (_m *ScholarshipService) FetchScholarshipBackoffice(ctx context.Context, filter entity.ScholarshipFilterBackoffice) (entity.ScholarshipFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.ScholarshipFeed
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScholarshipFilterBackoffice) entity.ScholarshipFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.ScholarshipFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.ScholarshipFilterBackoffice) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *ScholarshipService) GetByID(ctx context.Context, ID int64) (entity.Scholarship, error) {
	ret := _m.Called(ctx, ID)

	var r0 entity.Scholarship
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Scholarship); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entity.Scholarship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
