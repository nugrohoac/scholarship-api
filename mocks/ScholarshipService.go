// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Nusantara-Muda/scholarship-api/src/business/entity"
	mock "github.com/stretchr/testify/mock"
)

// ScholarshipService is an autogenerated mock type for the ScholarshipService type
type ScholarshipService struct {
	mock.Mock
}

// AnnouncementStatusScheduler provides a mock function with given fields:
func (_m *ScholarshipService) AnnouncementStatusScheduler() ([]int, error) {
	ret := _m.Called()

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Apply provides a mock function with given fields: ctx, userID, scholarshipID, essay, recommendationLetter
func (_m *ScholarshipService) Apply(ctx context.Context, userID int64, scholarshipID int64, essay string, recommendationLetter entity.Image) (string, error) {
	ret := _m.Called(ctx, userID, scholarshipID, essay, recommendationLetter)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, entity.Image) string); ok {
		r0 = rf(ctx, userID, scholarshipID, essay, recommendationLetter)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, entity.Image) error); ok {
		r1 = rf(ctx, userID, scholarshipID, essay, recommendationLetter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApprovedScholarship provides a mock function with given fields: ctx, scholarshipID, actionType
func (_m *ScholarshipService) ApprovedScholarship(ctx context.Context, scholarshipID int64, actionType int32) (string, error) {
	ret := _m.Called(ctx, scholarshipID, actionType)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) string); ok {
		r0 = rf(ctx, scholarshipID, actionType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int32) error); ok {
		r1 = rf(ctx, scholarshipID, actionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, scholarship
func (_m *ScholarshipService) Create(ctx context.Context, scholarship entity.Scholarship) (entity.Scholarship, error) {
	ret := _m.Called(ctx, scholarship)

	var r0 entity.Scholarship
	if rf, ok := ret.Get(0).(func(context.Context, entity.Scholarship) entity.Scholarship); ok {
		r0 = rf(ctx, scholarship)
	} else {
		r0 = ret.Get(0).(entity.Scholarship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Scholarship) error); ok {
		r1 = rf(ctx, scholarship)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *ScholarshipService) Fetch(ctx context.Context, filter entity.ScholarshipFilter) (entity.ScholarshipFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.ScholarshipFeed
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScholarshipFilter) entity.ScholarshipFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.ScholarshipFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.ScholarshipFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchScholarshipBackoffice provides a mock function with given fields: ctx, filter
func (_m *ScholarshipService) FetchScholarshipBackoffice(ctx context.Context, filter entity.ScholarshipFilterBackoffice) (entity.ScholarshipFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.ScholarshipFeed
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScholarshipFilterBackoffice) entity.ScholarshipFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.ScholarshipFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.ScholarshipFilterBackoffice) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishStatusScheduler provides a mock function with given fields:
func (_m *ScholarshipService) FinishStatusScheduler() ([]int, error) {
	ret := _m.Called()

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FundingStatusScheduler provides a mock function with given fields:
func (_m *ScholarshipService) FundingStatusScheduler() ([]int, error) {
	ret := _m.Called()

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *ScholarshipService) GetByID(ctx context.Context, ID int64) (entity.Scholarship, error) {
	ret := _m.Called(ctx, ID)

	var r0 entity.Scholarship
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Scholarship); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entity.Scholarship)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyScholarship provides a mock function with given fields: ctx, filter
func (_m *ScholarshipService) MyScholarship(ctx context.Context, filter entity.ScholarshipFilter) (entity.ApplicantFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.ApplicantFeed
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScholarshipFilter) entity.ApplicantFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.ApplicantFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.ScholarshipFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistrationStatusScheduler provides a mock function with given fields:
func (_m *ScholarshipService) RegistrationStatusScheduler() ([]int, error) {
	ret := _m.Called()

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewStatusScheduler provides a mock function with given fields:
func (_m *ScholarshipService) ReviewStatusScheduler() ([]int, error) {
	ret := _m.Called()

	var r0 []int
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScholarshipStatus provides a mock function with given fields: status, id
func (_m *ScholarshipService) UpdateScholarshipStatus(status int, id int) error {
	ret := _m.Called(status, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(status, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
