// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/Nusantara-Muda/scholarship-api/src/business/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ActivateStatus provides a mock function with given fields: ctx, token
func (_m *UserService) ActivateStatus(ctx context.Context, token string) (entity.User, error) {
	ret := _m.Called(ctx, token)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *UserService) ForgotPassword(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UserService) Login(ctx context.Context, email string, password string) (entity.LoginResponse, error) {
	ret := _m.Called(ctx, email, password)

	var r0 entity.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.LoginResponse); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(entity.LoginResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendEmailVerification provides a mock function with given fields: ctx, email
func (_m *UserService) ResendEmailVerification(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, password
func (_m *UserService) ResetPassword(ctx context.Context, password string) (entity.User, error) {
	ret := _m.Called(ctx, password)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, password)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetupEducation provides a mock function with given fields: ctx, user
func (_m *UserService) SetupEducation(ctx context.Context, user entity.User) (entity.User, error) {
	ret := _m.Called(ctx, user)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, user
func (_m *UserService) Store(ctx context.Context, user entity.User) (entity.User, error) {
	ret := _m.Called(ctx, user)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, ID, user
func (_m *UserService) UpdateByID(ctx context.Context, ID int64, user entity.User) (entity.User, error) {
	ret := _m.Called(ctx, ID, user)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.User) entity.User); ok {
		r0 = rf(ctx, ID, user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.User) error); ok {
		r1 = rf(ctx, ID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
