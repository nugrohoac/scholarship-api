// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/Nusantara-Muda/scholarship-api/src/business/entity"

	mock "github.com/stretchr/testify/mock"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, scholarshipIDs
func (_m *PaymentRepository) Fetch(ctx context.Context, scholarshipIDs []int64) ([]entity.Payment, error) {
	ret := _m.Called(ctx, scholarshipIDs)

	var r0 []entity.Payment
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.Payment); ok {
		r0 = rf(ctx, scholarshipIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, scholarshipIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitTransfer provides a mock function with given fields: ctx, payment
func (_m *PaymentRepository) SubmitTransfer(ctx context.Context, payment entity.Payment) (entity.Payment, error) {
	ret := _m.Called(ctx, payment)

	var r0 entity.Payment
	if rf, ok := ret.Get(0).(func(context.Context, entity.Payment) entity.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Get(0).(entity.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
