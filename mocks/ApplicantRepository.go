// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Nusantara-Muda/scholarship-api/src/business/entity"
	mock "github.com/stretchr/testify/mock"
)

// ApplicantRepository is an autogenerated mock type for the ApplicantRepository type
type ApplicantRepository struct {
	mock.Mock
}

// CountAndSumRating provides a mock function with given fields: ctx, userID
func (_m *ApplicantRepository) CountAndSumRating(ctx context.Context, userID int64) (int32, int32, error) {
	ret := _m.Called(ctx, userID)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, int64) int32); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, int64) int32); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *ApplicantRepository) Fetch(ctx context.Context, filter entity.FilterApplicant) ([]entity.Applicant, string, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.Applicant
	if rf, ok := ret.Get(0).(func(context.Context, entity.FilterApplicant) []entity.Applicant); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Applicant)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, entity.FilterApplicant) string); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, entity.FilterApplicant) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *ApplicantRepository) GetByID(ctx context.Context, ID int64) (entity.Applicant, error) {
	ret := _m.Called(ctx, ID)

	var r0 entity.Applicant
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Applicant); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entity.Applicant)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatusConfirmation provides a mock function with given fields: ctx, userID, scholarshipID
func (_m *ApplicantRepository) SetStatusConfirmation(ctx context.Context, userID int64, scholarshipID int64) error {
	ret := _m.Called(ctx, userID, scholarshipID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, scholarshipID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusWaitForConfirmation provides a mock function with given fields: ctx, userIDs, scholarshipID
func (_m *ApplicantRepository) SetStatusWaitForConfirmation(ctx context.Context, userIDs []int64, scholarshipID int64) error {
	ret := _m.Called(ctx, userIDs, scholarshipID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, int64) error); ok {
		r0 = rf(ctx, userIDs, scholarshipID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreRating provides a mock function with given fields: ctx, Applicant, avgRating, rating
func (_m *ApplicantRepository) StoreRating(ctx context.Context, Applicant entity.Applicant, avgRating float64, rating int32) error {
	ret := _m.Called(ctx, Applicant, avgRating, rating)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Applicant, float64, int32) error); ok {
		r0 = rf(ctx, Applicant, avgRating, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, ID, status
func (_m *ApplicantRepository) UpdateStatus(ctx context.Context, ID int64, status int32) error {
	ret := _m.Called(ctx, ID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) error); ok {
		r0 = rf(ctx, ID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
