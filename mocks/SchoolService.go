// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	scholarship_api "github.com/Nusantara-Muda/scholarship-api"
	mock "github.com/stretchr/testify/mock"
)

// SchoolService is an autogenerated mock type for the SchoolService type
type SchoolService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, school
func (_m *SchoolService) Create(ctx context.Context, school scholarship_api.School) (scholarship_api.School, error) {
	ret := _m.Called(ctx, school)

	var r0 scholarship_api.School
	if rf, ok := ret.Get(0).(func(context.Context, scholarship_api.School) scholarship_api.School); ok {
		r0 = rf(ctx, school)
	} else {
		r0 = ret.Get(0).(scholarship_api.School)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, scholarship_api.School) error); ok {
		r1 = rf(ctx, school)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *SchoolService) Fetch(ctx context.Context, filter scholarship_api.SchoolFilter) (scholarship_api.SchoolFeed, error) {
	ret := _m.Called(ctx, filter)

	var r0 scholarship_api.SchoolFeed
	if rf, ok := ret.Get(0).(func(context.Context, scholarship_api.SchoolFilter) scholarship_api.SchoolFeed); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(scholarship_api.SchoolFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, scholarship_api.SchoolFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
